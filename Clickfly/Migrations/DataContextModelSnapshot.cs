// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using clickfly.Data;

namespace clickfly.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.11")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("clickfly.Models.AccessToken", b =>
                {
                    b.Property<string>("id")
                        .HasColumnType("text");

                    b.Property<DateTime?>("created_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("excluded")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("expires_in")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("resource_id")
                        .HasColumnType("text");

                    b.Property<string>("token")
                        .HasColumnType("text");

                    b.Property<DateTime?>("updated_at")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("id");

                    b.ToTable("access_tokens");
                });

            modelBuilder.Entity("clickfly.Models.AccountVerification", b =>
                {
                    b.Property<string>("id")
                        .HasColumnType("text");

                    b.Property<DateTime?>("created_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("customer_id")
                        .HasColumnType("text");

                    b.Property<bool>("excluded")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("expires")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("token")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("updated_at")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("id");

                    b.HasIndex("customer_id");

                    b.ToTable("account_verifications");
                });

            modelBuilder.Entity("clickfly.Models.Aerodrome", b =>
                {
                    b.Property<string>("id")
                        .HasColumnType("text");

                    b.Property<string>("access")
                        .HasColumnType("text");

                    b.Property<float>("altitude")
                        .HasColumnType("real");

                    b.Property<string>("category")
                        .HasColumnType("text");

                    b.Property<string>("ciad")
                        .HasColumnType("text");

                    b.Property<string>("city_id")
                        .HasColumnType("text");

                    b.Property<DateTime?>("created_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("designation")
                        .HasColumnType("text");

                    b.Property<bool>("excluded")
                        .HasColumnType("boolean");

                    b.Property<float>("latitude")
                        .HasColumnType("real");

                    b.Property<float>("length")
                        .HasColumnType("real");

                    b.Property<float>("longitude")
                        .HasColumnType("real");

                    b.Property<string>("name")
                        .HasColumnType("text");

                    b.Property<string>("oaci_code")
                        .HasColumnType("text");

                    b.Property<string>("operation")
                        .HasColumnType("text");

                    b.Property<string>("resistance")
                        .HasColumnType("text");

                    b.Property<string>("surface")
                        .HasColumnType("text");

                    b.Property<string>("type")
                        .HasColumnType("text");

                    b.Property<DateTime?>("updated_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<float>("width")
                        .HasColumnType("real");

                    b.HasKey("id");

                    b.HasIndex("city_id");

                    b.ToTable("aerodromes");
                });

            modelBuilder.Entity("clickfly.Models.AirTaxi", b =>
                {
                    b.Property<string>("id")
                        .HasColumnType("text");

                    b.Property<string>("cnpj")
                        .HasColumnType("text");

                    b.Property<DateTime?>("created_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("email")
                        .HasColumnType("text");

                    b.Property<bool>("excluded")
                        .HasColumnType("boolean");

                    b.Property<string>("name")
                        .HasColumnType("text");

                    b.Property<string>("phone_number")
                        .HasColumnType("text");

                    b.Property<DateTime?>("updated_at")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("id");

                    b.ToTable("air_taxis");
                });

            modelBuilder.Entity("clickfly.Models.AirTaxiBase", b =>
                {
                    b.Property<string>("id")
                        .HasColumnType("text");

                    b.Property<string>("aerodrome_id")
                        .HasColumnType("text");

                    b.Property<string>("air_taxi_id")
                        .HasColumnType("text");

                    b.Property<DateTime?>("created_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("excluded")
                        .HasColumnType("boolean");

                    b.Property<float>("latitude")
                        .HasColumnType("real");

                    b.Property<float>("longitude")
                        .HasColumnType("real");

                    b.Property<string>("name")
                        .HasColumnType("text");

                    b.Property<DateTime?>("updated_at")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("id");

                    b.HasIndex("aerodrome_id");

                    b.HasIndex("air_taxi_id");

                    b.ToTable("air_taxi_bases");
                });

            modelBuilder.Entity("clickfly.Models.Aircraft", b =>
                {
                    b.Property<string>("id")
                        .HasColumnType("text");

                    b.Property<string>("air_taxi_id")
                        .HasColumnType("text");

                    b.Property<string>("aircraft_model_id")
                        .HasColumnType("text");

                    b.Property<float>("autonomy")
                        .HasColumnType("real");

                    b.Property<DateTime?>("created_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("crew")
                        .HasColumnType("integer");

                    b.Property<float>("cruising_speed")
                        .HasColumnType("real");

                    b.Property<string>("description")
                        .HasColumnType("text");

                    b.Property<float>("empty_weight")
                        .HasColumnType("real");

                    b.Property<bool>("excluded")
                        .HasColumnType("boolean");

                    b.Property<float>("fixed_price")
                        .HasColumnType("real");

                    b.Property<float>("fixed_price_radius")
                        .HasColumnType("real");

                    b.Property<float>("maximum_speed")
                        .HasColumnType("real");

                    b.Property<float>("maximum_takeoff_weight")
                        .HasColumnType("real");

                    b.Property<int>("passengers")
                        .HasColumnType("integer");

                    b.Property<string>("prefix")
                        .HasColumnType("text");

                    b.Property<bool>("pressurized")
                        .HasColumnType("boolean");

                    b.Property<float>("price_per_km")
                        .HasColumnType("real");

                    b.Property<float>("range")
                        .HasColumnType("real");

                    b.Property<DateTime?>("updated_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("year")
                        .HasColumnType("integer");

                    b.HasKey("id");

                    b.HasIndex("air_taxi_id");

                    b.HasIndex("aircraft_model_id");

                    b.ToTable("aircrafts");
                });

            modelBuilder.Entity("clickfly.Models.AircraftImage", b =>
                {
                    b.Property<string>("id")
                        .HasColumnType("text");

                    b.Property<string>("aircraft_id")
                        .HasColumnType("text");

                    b.Property<DateTime?>("created_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("excluded")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("updated_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("view")
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.HasIndex("aircraft_id");

                    b.ToTable("aircraft_images");
                });

            modelBuilder.Entity("clickfly.Models.AircraftModel", b =>
                {
                    b.Property<string>("id")
                        .HasColumnType("text");

                    b.Property<string>("carrier_dimensions")
                        .HasColumnType("text");

                    b.Property<string>("carrier_size")
                        .HasColumnType("text");

                    b.Property<DateTime?>("created_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("engine_type")
                        .HasColumnType("text");

                    b.Property<bool>("excluded")
                        .HasColumnType("boolean");

                    b.Property<string>("manufacturer_id")
                        .HasColumnType("text");

                    b.Property<string>("name")
                        .HasColumnType("text");

                    b.Property<string>("number_of_engines")
                        .HasColumnType("text");

                    b.Property<string>("type")
                        .HasColumnType("text");

                    b.Property<DateTime?>("updated_at")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("id");

                    b.HasIndex("manufacturer_id");

                    b.ToTable("aircraft_models");
                });

            modelBuilder.Entity("clickfly.Models.Booking", b =>
                {
                    b.Property<string>("id")
                        .HasColumnType("text");

                    b.Property<DateTime?>("created_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("customer_id")
                        .HasColumnType("text");

                    b.Property<bool>("excluded")
                        .HasColumnType("boolean");

                    b.Property<string>("flight_segment_id")
                        .HasColumnType("text");

                    b.Property<DateTime?>("updated_at")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("id");

                    b.HasIndex("customer_id");

                    b.HasIndex("flight_segment_id");

                    b.ToTable("bookings");
                });

            modelBuilder.Entity("clickfly.Models.BookingPayment", b =>
                {
                    b.Property<string>("id")
                        .HasColumnType("text");

                    b.Property<string>("booking_id")
                        .HasColumnType("text");

                    b.Property<DateTime?>("created_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("excluded")
                        .HasColumnType("boolean");

                    b.Property<string>("order_id")
                        .HasColumnType("text");

                    b.Property<string>("payment_method")
                        .HasColumnType("text");

                    b.Property<DateTime?>("updated_at")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("id");

                    b.HasIndex("booking_id");

                    b.ToTable("booking_payments");
                });

            modelBuilder.Entity("clickfly.Models.BookingStatus", b =>
                {
                    b.Property<string>("id")
                        .HasColumnType("text");

                    b.Property<string>("booking_id")
                        .HasColumnType("text");

                    b.Property<DateTime?>("created_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("excluded")
                        .HasColumnType("boolean");

                    b.Property<string>("type")
                        .HasColumnType("text");

                    b.Property<DateTime?>("updated_at")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("id");

                    b.HasIndex("booking_id");

                    b.ToTable("booking_status");
                });

            modelBuilder.Entity("clickfly.Models.City", b =>
                {
                    b.Property<string>("id")
                        .HasColumnType("text");

                    b.Property<DateTime?>("created_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("description")
                        .HasColumnType("text");

                    b.Property<bool>("excluded")
                        .HasColumnType("boolean");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("prefix")
                        .HasColumnType("text");

                    b.Property<string>("state_id")
                        .HasColumnType("text");

                    b.Property<string>("timezone_id")
                        .HasColumnType("text");

                    b.Property<DateTime?>("updated_at")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("id");

                    b.HasIndex("state_id");

                    b.HasIndex("timezone_id");

                    b.ToTable("cities");
                });

            modelBuilder.Entity("clickfly.Models.Customer", b =>
                {
                    b.Property<string>("id")
                        .HasColumnType("text");

                    b.Property<DateTime?>("birthdate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("created_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("customer_id")
                        .HasColumnType("text");

                    b.Property<string>("document")
                        .HasColumnType("text");

                    b.Property<string>("document_type")
                        .HasColumnType("text");

                    b.Property<string>("email")
                        .HasColumnType("text");

                    b.Property<string>("emergency_phone_number")
                        .HasColumnType("text");

                    b.Property<bool>("excluded")
                        .HasColumnType("boolean");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("password_hash")
                        .HasColumnType("text");

                    b.Property<DateTime?>("password_reset_expires")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("password_reset_token")
                        .HasColumnType("text");

                    b.Property<string>("phone_number")
                        .HasColumnType("text");

                    b.Property<string>("role")
                        .HasColumnType("text");

                    b.Property<string>("type")
                        .HasColumnType("text");

                    b.Property<DateTime?>("updated_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("verified")
                        .HasColumnType("boolean");

                    b.HasKey("id");

                    b.ToTable("customers");
                });

            modelBuilder.Entity("clickfly.Models.CustomerAddress", b =>
                {
                    b.Property<string>("id")
                        .HasColumnType("text");

                    b.Property<string>("address_id")
                        .HasColumnType("text");

                    b.Property<string>("city")
                        .HasColumnType("text");

                    b.Property<string>("complement")
                        .HasColumnType("text");

                    b.Property<DateTime?>("created_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("customer_id")
                        .HasColumnType("text");

                    b.Property<bool>("excluded")
                        .HasColumnType("boolean");

                    b.Property<string>("name")
                        .HasColumnType("text");

                    b.Property<string>("neighborhood")
                        .HasColumnType("text");

                    b.Property<string>("number")
                        .HasColumnType("text");

                    b.Property<string>("state")
                        .HasColumnType("text");

                    b.Property<string>("street")
                        .HasColumnType("text");

                    b.Property<DateTime?>("updated_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("zipcode")
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.HasIndex("customer_id");

                    b.ToTable("customer_addresses");
                });

            modelBuilder.Entity("clickfly.Models.CustomerAerodrome", b =>
                {
                    b.Property<string>("id")
                        .HasColumnType("text");

                    b.Property<string>("aerodrome_id")
                        .HasColumnType("text");

                    b.Property<DateTime?>("created_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("customer_id")
                        .HasColumnType("text");

                    b.Property<bool>("excluded")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("updated_at")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("id");

                    b.HasIndex("aerodrome_id");

                    b.HasIndex("customer_id");

                    b.ToTable("customer_aerodromes");
                });

            modelBuilder.Entity("clickfly.Models.CustomerCard", b =>
                {
                    b.Property<string>("id")
                        .HasColumnType("text");

                    b.Property<string>("card_id")
                        .HasColumnType("text");

                    b.Property<DateTime?>("created_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("customer_id")
                        .HasColumnType("text");

                    b.Property<bool>("excluded")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("updated_at")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("id");

                    b.HasIndex("customer_id");

                    b.ToTable("customer_cards");
                });

            modelBuilder.Entity("clickfly.Models.CustomerFriend", b =>
                {
                    b.Property<string>("id")
                        .HasColumnType("text");

                    b.Property<DateTime?>("birthdate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("created_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("customer_id")
                        .HasColumnType("text");

                    b.Property<string>("document")
                        .HasColumnType("text");

                    b.Property<string>("document_type")
                        .HasColumnType("text");

                    b.Property<string>("email")
                        .HasColumnType("text");

                    b.Property<string>("emergency_phone_number")
                        .HasColumnType("text");

                    b.Property<bool>("excluded")
                        .HasColumnType("boolean");

                    b.Property<string>("name")
                        .HasColumnType("text");

                    b.Property<string>("phone_number")
                        .HasColumnType("text");

                    b.Property<DateTime?>("updated_at")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("id");

                    b.HasIndex("customer_id");

                    b.ToTable("customer_friends");
                });

            modelBuilder.Entity("clickfly.Models.File", b =>
                {
                    b.Property<string>("id")
                        .HasColumnType("text");

                    b.Property<DateTime?>("created_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("excluded")
                        .HasColumnType("boolean");

                    b.Property<string>("field_name")
                        .HasColumnType("text");

                    b.Property<string>("key")
                        .HasColumnType("text");

                    b.Property<string>("mimetype")
                        .HasColumnType("text");

                    b.Property<string>("name")
                        .HasColumnType("text");

                    b.Property<string>("resource")
                        .HasColumnType("text");

                    b.Property<string>("resource_id")
                        .HasColumnType("text");

                    b.Property<long>("size")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("updated_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("url")
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.ToTable("files");
                });

            modelBuilder.Entity("clickfly.Models.Flight", b =>
                {
                    b.Property<string>("id")
                        .HasColumnType("text");

                    b.Property<string>("air_taxi_id")
                        .HasColumnType("text");

                    b.Property<string>("aircraft_id")
                        .HasColumnType("text");

                    b.Property<DateTime?>("created_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("excluded")
                        .HasColumnType("boolean");

                    b.Property<string>("type")
                        .HasColumnType("text");

                    b.Property<DateTime?>("updated_at")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("id");

                    b.HasIndex("air_taxi_id");

                    b.HasIndex("aircraft_id");

                    b.ToTable("flights");
                });

            modelBuilder.Entity("clickfly.Models.FlightSegment", b =>
                {
                    b.Property<string>("id")
                        .HasColumnType("text");

                    b.Property<string>("aircraft_id")
                        .HasColumnType("text");

                    b.Property<DateTime>("arrival_datetime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("created_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("departure_datetime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("destination_aerodrome_id")
                        .HasColumnType("text");

                    b.Property<bool>("excluded")
                        .HasColumnType("boolean");

                    b.Property<string>("flight_id")
                        .HasColumnType("text");

                    b.Property<double>("flight_time")
                        .HasColumnType("double precision");

                    b.Property<int>("number")
                        .HasColumnType("integer");

                    b.Property<string>("origin_aerodrome_id")
                        .HasColumnType("text");

                    b.Property<float>("price_per_seat")
                        .HasColumnType("real");

                    b.Property<int>("total_seats")
                        .HasColumnType("integer");

                    b.Property<string>("type")
                        .HasColumnType("text");

                    b.Property<DateTime?>("updated_at")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("id");

                    b.HasIndex("aircraft_id");

                    b.HasIndex("destination_aerodrome_id");

                    b.HasIndex("flight_id");

                    b.HasIndex("origin_aerodrome_id");

                    b.ToTable("flight_segments");
                });

            modelBuilder.Entity("clickfly.Models.Manufacturer", b =>
                {
                    b.Property<string>("id")
                        .HasColumnType("text");

                    b.Property<string>("country")
                        .HasColumnType("text");

                    b.Property<DateTime?>("created_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("description")
                        .HasColumnType("text");

                    b.Property<bool>("excluded")
                        .HasColumnType("boolean");

                    b.Property<string>("name")
                        .HasColumnType("text");

                    b.Property<DateTime?>("updated_at")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("id");

                    b.ToTable("manufacturers");
                });

            modelBuilder.Entity("clickfly.Models.Passenger", b =>
                {
                    b.Property<string>("id")
                        .HasColumnType("text");

                    b.Property<DateTime?>("birthdate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("booking_id")
                        .HasColumnType("text");

                    b.Property<DateTime?>("created_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("document")
                        .HasColumnType("text");

                    b.Property<string>("document_type")
                        .HasColumnType("text");

                    b.Property<string>("email")
                        .HasColumnType("text");

                    b.Property<string>("emergency_phone_number")
                        .HasColumnType("text");

                    b.Property<bool>("excluded")
                        .HasColumnType("boolean");

                    b.Property<string>("flight_segment_id")
                        .HasColumnType("text");

                    b.Property<string>("name")
                        .HasColumnType("text");

                    b.Property<string>("phone_number")
                        .HasColumnType("text");

                    b.Property<DateTime?>("updated_at")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("id");

                    b.HasIndex("booking_id");

                    b.HasIndex("flight_segment_id");

                    b.ToTable("passengers");
                });

            modelBuilder.Entity("clickfly.Models.State", b =>
                {
                    b.Property<string>("id")
                        .HasColumnType("text");

                    b.Property<DateTime?>("created_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("excluded")
                        .HasColumnType("boolean");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("prefix")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("updated_at")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("id");

                    b.ToTable("states");
                });

            modelBuilder.Entity("clickfly.Models.Ticket", b =>
                {
                    b.Property<string>("id")
                        .HasColumnType("text");

                    b.Property<DateTime?>("created_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("excluded")
                        .HasColumnType("boolean");

                    b.Property<string>("flight_segment_id")
                        .HasColumnType("text");

                    b.Property<string>("passenger_id")
                        .HasColumnType("text");

                    b.Property<string>("qr_code")
                        .HasColumnType("text");

                    b.Property<DateTime?>("updated_at")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("id");

                    b.HasIndex("flight_segment_id");

                    b.HasIndex("passenger_id")
                        .IsUnique();

                    b.ToTable("tickets");
                });

            modelBuilder.Entity("clickfly.Models.Timezone", b =>
                {
                    b.Property<string>("id")
                        .HasColumnType("text");

                    b.Property<DateTime?>("created_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("excluded")
                        .HasColumnType("boolean");

                    b.Property<int>("gmt")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("updated_at")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("id");

                    b.ToTable("timezones");
                });

            modelBuilder.Entity("clickfly.Models.User", b =>
                {
                    b.Property<string>("id")
                        .HasColumnType("text");

                    b.Property<string>("air_taxi_id")
                        .HasColumnType("text");

                    b.Property<DateTime?>("created_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("email")
                        .HasColumnType("text");

                    b.Property<bool>("excluded")
                        .HasColumnType("boolean");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("password_hash")
                        .HasColumnType("text");

                    b.Property<string>("role")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("updated_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.HasIndex("air_taxi_id");

                    b.ToTable("users");
                });

            modelBuilder.Entity("clickfly.Models.AccountVerification", b =>
                {
                    b.HasOne("clickfly.Models.Customer", "customer")
                        .WithMany()
                        .HasForeignKey("customer_id");

                    b.Navigation("customer");
                });

            modelBuilder.Entity("clickfly.Models.Aerodrome", b =>
                {
                    b.HasOne("clickfly.Models.City", "city")
                        .WithMany()
                        .HasForeignKey("city_id");

                    b.Navigation("city");
                });

            modelBuilder.Entity("clickfly.Models.AirTaxiBase", b =>
                {
                    b.HasOne("clickfly.Models.Aerodrome", "aerodrome")
                        .WithMany()
                        .HasForeignKey("aerodrome_id");

                    b.HasOne("clickfly.Models.AirTaxi", "air_taxi")
                        .WithMany()
                        .HasForeignKey("air_taxi_id");

                    b.Navigation("aerodrome");

                    b.Navigation("air_taxi");
                });

            modelBuilder.Entity("clickfly.Models.Aircraft", b =>
                {
                    b.HasOne("clickfly.Models.AirTaxi", "air_taxi")
                        .WithMany()
                        .HasForeignKey("air_taxi_id");

                    b.HasOne("clickfly.Models.AircraftModel", "model")
                        .WithMany("aircrafts")
                        .HasForeignKey("aircraft_model_id");

                    b.Navigation("air_taxi");

                    b.Navigation("model");
                });

            modelBuilder.Entity("clickfly.Models.AircraftImage", b =>
                {
                    b.HasOne("clickfly.Models.Aircraft", "aircraft")
                        .WithMany()
                        .HasForeignKey("aircraft_id");

                    b.Navigation("aircraft");
                });

            modelBuilder.Entity("clickfly.Models.AircraftModel", b =>
                {
                    b.HasOne("clickfly.Models.Manufacturer", "manufacturer")
                        .WithMany()
                        .HasForeignKey("manufacturer_id");

                    b.Navigation("manufacturer");
                });

            modelBuilder.Entity("clickfly.Models.Booking", b =>
                {
                    b.HasOne("clickfly.Models.Customer", "customer")
                        .WithMany()
                        .HasForeignKey("customer_id");

                    b.HasOne("clickfly.Models.FlightSegment", "flight_segment")
                        .WithMany()
                        .HasForeignKey("flight_segment_id");

                    b.Navigation("customer");

                    b.Navigation("flight_segment");
                });

            modelBuilder.Entity("clickfly.Models.BookingPayment", b =>
                {
                    b.HasOne("clickfly.Models.Booking", "booking")
                        .WithMany()
                        .HasForeignKey("booking_id");

                    b.Navigation("booking");
                });

            modelBuilder.Entity("clickfly.Models.BookingStatus", b =>
                {
                    b.HasOne("clickfly.Models.Booking", "booking")
                        .WithMany()
                        .HasForeignKey("booking_id");

                    b.Navigation("booking");
                });

            modelBuilder.Entity("clickfly.Models.City", b =>
                {
                    b.HasOne("clickfly.Models.State", "state")
                        .WithMany()
                        .HasForeignKey("state_id");

                    b.HasOne("clickfly.Models.Timezone", "timezone")
                        .WithMany()
                        .HasForeignKey("timezone_id");

                    b.Navigation("state");

                    b.Navigation("timezone");
                });

            modelBuilder.Entity("clickfly.Models.CustomerAddress", b =>
                {
                    b.HasOne("clickfly.Models.Customer", "customer")
                        .WithMany()
                        .HasForeignKey("customer_id");

                    b.Navigation("customer");
                });

            modelBuilder.Entity("clickfly.Models.CustomerAerodrome", b =>
                {
                    b.HasOne("clickfly.Models.Aerodrome", "aerodrome")
                        .WithMany()
                        .HasForeignKey("aerodrome_id");

                    b.HasOne("clickfly.Models.Customer", "customer")
                        .WithMany()
                        .HasForeignKey("customer_id");

                    b.Navigation("aerodrome");

                    b.Navigation("customer");
                });

            modelBuilder.Entity("clickfly.Models.CustomerCard", b =>
                {
                    b.HasOne("clickfly.Models.Customer", "customer")
                        .WithMany()
                        .HasForeignKey("customer_id");

                    b.Navigation("customer");
                });

            modelBuilder.Entity("clickfly.Models.CustomerFriend", b =>
                {
                    b.HasOne("clickfly.Models.Customer", "customer")
                        .WithMany()
                        .HasForeignKey("customer_id");

                    b.Navigation("customer");
                });

            modelBuilder.Entity("clickfly.Models.Flight", b =>
                {
                    b.HasOne("clickfly.Models.AirTaxi", "air_taxi")
                        .WithMany()
                        .HasForeignKey("air_taxi_id");

                    b.HasOne("clickfly.Models.Aircraft", "aircraft")
                        .WithMany("flights")
                        .HasForeignKey("aircraft_id");

                    b.Navigation("air_taxi");

                    b.Navigation("aircraft");
                });

            modelBuilder.Entity("clickfly.Models.FlightSegment", b =>
                {
                    b.HasOne("clickfly.Models.Aircraft", "aircraft")
                        .WithMany()
                        .HasForeignKey("aircraft_id");

                    b.HasOne("clickfly.Models.Aerodrome", "destination_aerodrome")
                        .WithMany()
                        .HasForeignKey("destination_aerodrome_id");

                    b.HasOne("clickfly.Models.Flight", "flight")
                        .WithMany("segments")
                        .HasForeignKey("flight_id");

                    b.HasOne("clickfly.Models.Aerodrome", "origin_aerodrome")
                        .WithMany()
                        .HasForeignKey("origin_aerodrome_id");

                    b.Navigation("aircraft");

                    b.Navigation("destination_aerodrome");

                    b.Navigation("flight");

                    b.Navigation("origin_aerodrome");
                });

            modelBuilder.Entity("clickfly.Models.Passenger", b =>
                {
                    b.HasOne("clickfly.Models.Booking", "booking")
                        .WithMany()
                        .HasForeignKey("booking_id");

                    b.HasOne("clickfly.Models.FlightSegment", "flight_segment")
                        .WithMany()
                        .HasForeignKey("flight_segment_id");

                    b.Navigation("booking");

                    b.Navigation("flight_segment");
                });

            modelBuilder.Entity("clickfly.Models.Ticket", b =>
                {
                    b.HasOne("clickfly.Models.FlightSegment", "flight_segment")
                        .WithMany()
                        .HasForeignKey("flight_segment_id");

                    b.HasOne("clickfly.Models.Passenger", "passenger")
                        .WithOne("ticket")
                        .HasForeignKey("clickfly.Models.Ticket", "passenger_id");

                    b.Navigation("flight_segment");

                    b.Navigation("passenger");
                });

            modelBuilder.Entity("clickfly.Models.User", b =>
                {
                    b.HasOne("clickfly.Models.AirTaxi", "air_taxi")
                        .WithMany()
                        .HasForeignKey("air_taxi_id");

                    b.Navigation("air_taxi");
                });

            modelBuilder.Entity("clickfly.Models.Aircraft", b =>
                {
                    b.Navigation("flights");
                });

            modelBuilder.Entity("clickfly.Models.AircraftModel", b =>
                {
                    b.Navigation("aircrafts");
                });

            modelBuilder.Entity("clickfly.Models.Flight", b =>
                {
                    b.Navigation("segments");
                });

            modelBuilder.Entity("clickfly.Models.Passenger", b =>
                {
                    b.Navigation("ticket");
                });
#pragma warning restore 612, 618
        }
    }
}
