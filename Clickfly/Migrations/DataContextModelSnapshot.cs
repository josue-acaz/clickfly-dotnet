// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using clickfly.Data;

namespace clickfly.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.11")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("clickfly.Models.AccessToken", b =>
                {
                    b.Property<string>("id")
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime?>("created_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("created_by")
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("excluded")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("expires_in")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("resource_id")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("token")
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime?>("updated_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("updated_by")
                        .HasColumnType("varchar(100)");

                    b.HasKey("id");

                    b.ToTable("access_tokens");
                });

            modelBuilder.Entity("clickfly.Models.AccountVerification", b =>
                {
                    b.Property<string>("id")
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime?>("created_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("created_by")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("customer_id")
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("excluded")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("expires")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("token")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime?>("updated_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("updated_by")
                        .HasColumnType("varchar(100)");

                    b.HasKey("id");

                    b.HasIndex("customer_id");

                    b.ToTable("account_verifications");
                });

            modelBuilder.Entity("clickfly.Models.Aerodrome", b =>
                {
                    b.Property<string>("id")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("access")
                        .HasColumnType("varchar(100)");

                    b.Property<float>("altitude")
                        .HasColumnType("real");

                    b.Property<string>("category")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("ciad")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("city_id")
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime?>("created_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("created_by")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("designation")
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("excluded")
                        .HasColumnType("boolean");

                    b.Property<float>("latitude")
                        .HasColumnType("real");

                    b.Property<float>("length")
                        .HasColumnType("real");

                    b.Property<float>("longitude")
                        .HasColumnType("real");

                    b.Property<string>("name")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("oaci_code")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("operation")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("resistance")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("surface")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("type")
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime?>("updated_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("updated_by")
                        .HasColumnType("varchar(100)");

                    b.Property<float>("width")
                        .HasColumnType("real");

                    b.HasKey("id");

                    b.HasIndex("city_id");

                    b.ToTable("aerodromes");
                });

            modelBuilder.Entity("clickfly.Models.AirTaxi", b =>
                {
                    b.Property<string>("id")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("cnpj")
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime?>("created_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("created_by")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("email")
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("excluded")
                        .HasColumnType("boolean");

                    b.Property<string>("name")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("phone_number")
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime?>("updated_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("updated_by")
                        .HasColumnType("varchar(100)");

                    b.HasKey("id");

                    b.ToTable("air_taxis");
                });

            modelBuilder.Entity("clickfly.Models.AirTaxiBase", b =>
                {
                    b.Property<string>("id")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("aerodrome_id")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("air_taxi_id")
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime?>("created_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("created_by")
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("excluded")
                        .HasColumnType("boolean");

                    b.Property<float>("latitude")
                        .HasColumnType("real");

                    b.Property<float>("longitude")
                        .HasColumnType("real");

                    b.Property<string>("name")
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime?>("updated_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("updated_by")
                        .HasColumnType("varchar(100)");

                    b.HasKey("id");

                    b.HasIndex("aerodrome_id");

                    b.HasIndex("air_taxi_id");

                    b.ToTable("air_taxi_bases");
                });

            modelBuilder.Entity("clickfly.Models.Aircraft", b =>
                {
                    b.Property<string>("id")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("air_taxi_id")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("aircraft_model_id")
                        .HasColumnType("varchar(100)");

                    b.Property<float>("autonomy")
                        .HasColumnType("real");

                    b.Property<DateTime?>("created_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("created_by")
                        .HasColumnType("varchar(100)");

                    b.Property<int>("crew")
                        .HasColumnType("integer");

                    b.Property<float>("cruising_speed")
                        .HasColumnType("real");

                    b.Property<string>("description")
                        .HasColumnType("varchar(100)");

                    b.Property<float>("empty_weight")
                        .HasColumnType("real");

                    b.Property<bool>("excluded")
                        .HasColumnType("boolean");

                    b.Property<int>("fixed_price")
                        .HasColumnType("integer");

                    b.Property<float>("fixed_price_radius")
                        .HasColumnType("real");

                    b.Property<float>("maximum_speed")
                        .HasColumnType("real");

                    b.Property<float>("maximum_takeoff_weight")
                        .HasColumnType("real");

                    b.Property<int>("passengers")
                        .HasColumnType("integer");

                    b.Property<string>("prefix")
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("pressurized")
                        .HasColumnType("boolean");

                    b.Property<int>("price_per_km")
                        .HasColumnType("integer");

                    b.Property<float>("range")
                        .HasColumnType("real");

                    b.Property<DateTime?>("updated_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("updated_by")
                        .HasColumnType("varchar(100)");

                    b.Property<int>("year")
                        .HasColumnType("integer");

                    b.HasKey("id");

                    b.HasIndex("air_taxi_id");

                    b.HasIndex("aircraft_model_id");

                    b.ToTable("aircrafts");
                });

            modelBuilder.Entity("clickfly.Models.AircraftImage", b =>
                {
                    b.Property<string>("id")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("aircraft_id")
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime?>("created_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("created_by")
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("excluded")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("updated_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("updated_by")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("view")
                        .HasColumnType("varchar(100)");

                    b.HasKey("id");

                    b.HasIndex("aircraft_id");

                    b.ToTable("aircraft_images");
                });

            modelBuilder.Entity("clickfly.Models.AircraftModel", b =>
                {
                    b.Property<string>("id")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("carrier_dimensions")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("carrier_size")
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime?>("created_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("created_by")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("engine_type")
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("excluded")
                        .HasColumnType("boolean");

                    b.Property<string>("manufacturer_id")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("name")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("number_of_engines")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("type")
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime?>("updated_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("updated_by")
                        .HasColumnType("varchar(100)");

                    b.HasKey("id");

                    b.HasIndex("manufacturer_id");

                    b.ToTable("aircraft_models");
                });

            modelBuilder.Entity("clickfly.Models.Boarding", b =>
                {
                    b.Property<string>("id")
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime?>("created_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("created_by")
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("excluded")
                        .HasColumnType("boolean");

                    b.Property<string>("flight_segment_id")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("passenger_id")
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime?>("updated_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("updated_by")
                        .HasColumnType("varchar(100)");

                    b.HasKey("id");

                    b.ToTable("boardings");
                });

            modelBuilder.Entity("clickfly.Models.Booking", b =>
                {
                    b.Property<string>("id")
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime?>("created_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("created_by")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("customer_id")
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("excluded")
                        .HasColumnType("boolean");

                    b.Property<string>("flight_segment_id")
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime?>("updated_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("updated_by")
                        .HasColumnType("varchar(100)");

                    b.HasKey("id");

                    b.HasIndex("customer_id");

                    b.HasIndex("flight_segment_id");

                    b.ToTable("bookings");
                });

            modelBuilder.Entity("clickfly.Models.BookingPayment", b =>
                {
                    b.Property<string>("id")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("booking_id")
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime?>("created_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("created_by")
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("excluded")
                        .HasColumnType("boolean");

                    b.Property<string>("order_id")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("payment_method")
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime?>("updated_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("updated_by")
                        .HasColumnType("varchar(100)");

                    b.HasKey("id");

                    b.HasIndex("booking_id");

                    b.ToTable("booking_payments");
                });

            modelBuilder.Entity("clickfly.Models.BookingStatus", b =>
                {
                    b.Property<string>("id")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("booking_id")
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime?>("created_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("created_by")
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("excluded")
                        .HasColumnType("boolean");

                    b.Property<string>("type")
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime?>("updated_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("updated_by")
                        .HasColumnType("varchar(100)");

                    b.HasKey("id");

                    b.HasIndex("booking_id");

                    b.ToTable("booking_status");
                });

            modelBuilder.Entity("clickfly.Models.Campaign", b =>
                {
                    b.Property<string>("id")
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime?>("created_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("created_by")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("description")
                        .HasColumnType("varchar(100)");

                    b.Property<decimal>("discount_on_the_next_flight")
                        .HasColumnType("numeric");

                    b.Property<bool>("excluded")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("expires_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("points_to_complete")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("updated_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("updated_by")
                        .HasColumnType("varchar(100)");

                    b.HasKey("id");

                    b.ToTable("campaigns");
                });

            modelBuilder.Entity("clickfly.Models.CampaignScore", b =>
                {
                    b.Property<string>("id")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("campaign_id")
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime?>("created_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("created_by")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("customer_id")
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("excluded")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("updated_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("updated_by")
                        .HasColumnType("varchar(100)");

                    b.HasKey("id");

                    b.HasIndex("campaign_id");

                    b.HasIndex("customer_id");

                    b.ToTable("campaign_scores");
                });

            modelBuilder.Entity("clickfly.Models.CampaignStatus", b =>
                {
                    b.Property<string>("id")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("campaign_id")
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime?>("created_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("created_by")
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("excluded")
                        .HasColumnType("boolean");

                    b.Property<string>("type")
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime?>("updated_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("updated_by")
                        .HasColumnType("varchar(100)");

                    b.HasKey("id");

                    b.HasIndex("campaign_id");

                    b.ToTable("campaign_status");
                });

            modelBuilder.Entity("clickfly.Models.City", b =>
                {
                    b.Property<string>("id")
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime?>("created_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("created_by")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("description")
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("excluded")
                        .HasColumnType("boolean");

                    b.Property<string>("name")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("prefix")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("state_id")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("timezone_id")
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime?>("updated_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("updated_by")
                        .HasColumnType("varchar(100)");

                    b.HasKey("id");

                    b.HasIndex("state_id");

                    b.HasIndex("timezone_id");

                    b.ToTable("cities");
                });

            modelBuilder.Entity("clickfly.Models.ContactRequest", b =>
                {
                    b.Property<string>("id")
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime?>("created_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("created_by")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("email")
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("excluded")
                        .HasColumnType("boolean");

                    b.Property<string>("message")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("name")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("phone_number")
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("read")
                        .HasColumnType("boolean");

                    b.Property<string>("subject")
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime?>("updated_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("updated_by")
                        .HasColumnType("varchar(100)");

                    b.HasKey("id");

                    b.ToTable("contact_requests");
                });

            modelBuilder.Entity("clickfly.Models.Customer", b =>
                {
                    b.Property<string>("id")
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime?>("birthdate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("created_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("created_by")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("customer_id")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("document")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("document_type")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("email")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("emergency_phone_number")
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("excluded")
                        .HasColumnType("boolean");

                    b.Property<string>("name")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("password_hash")
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime?>("password_reset_expires")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("password_reset_token")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("phone_number")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("role")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("type")
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime?>("updated_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("updated_by")
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("verified")
                        .HasColumnType("boolean");

                    b.HasKey("id");

                    b.ToTable("customers");
                });

            modelBuilder.Entity("clickfly.Models.CustomerAddress", b =>
                {
                    b.Property<string>("id")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("address_id")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("city")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("complement")
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime?>("created_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("created_by")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("customer_id")
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("excluded")
                        .HasColumnType("boolean");

                    b.Property<string>("name")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("neighborhood")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("number")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("state")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("street")
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime?>("updated_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("updated_by")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("zipcode")
                        .HasColumnType("varchar(100)");

                    b.HasKey("id");

                    b.HasIndex("customer_id");

                    b.ToTable("customer_addresses");
                });

            modelBuilder.Entity("clickfly.Models.CustomerAerodrome", b =>
                {
                    b.Property<string>("id")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("aerodrome_id")
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime?>("created_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("created_by")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("customer_id")
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("excluded")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("updated_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("updated_by")
                        .HasColumnType("varchar(100)");

                    b.HasKey("id");

                    b.HasIndex("aerodrome_id");

                    b.HasIndex("customer_id");

                    b.ToTable("customer_aerodromes");
                });

            modelBuilder.Entity("clickfly.Models.CustomerAtShoppingCart", b =>
                {
                    b.Property<string>("id")
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime?>("created_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("created_by")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("customer_id")
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("excluded")
                        .HasColumnType("boolean");

                    b.Property<string>("flight_segment_id")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("payment_method")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("selected_seats")
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime?>("updated_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("updated_by")
                        .HasColumnType("varchar(100)");

                    b.HasKey("id");

                    b.ToTable("customer_at_shopping_carts");
                });

            modelBuilder.Entity("clickfly.Models.CustomerCard", b =>
                {
                    b.Property<string>("id")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("card_id")
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime?>("created_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("created_by")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("customer_id")
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("excluded")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("updated_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("updated_by")
                        .HasColumnType("varchar(100)");

                    b.HasKey("id");

                    b.HasIndex("customer_id");

                    b.ToTable("customer_cards");
                });

            modelBuilder.Entity("clickfly.Models.CustomerContact", b =>
                {
                    b.Property<string>("id")
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime?>("created_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("created_by")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("customer_id")
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("excluded")
                        .HasColumnType("boolean");

                    b.Property<string>("name")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("phone_numer")
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime?>("updated_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("updated_by")
                        .HasColumnType("varchar(100)");

                    b.HasKey("id");

                    b.HasIndex("customer_id");

                    b.ToTable("customer_contacts");
                });

            modelBuilder.Entity("clickfly.Models.CustomerFriend", b =>
                {
                    b.Property<string>("id")
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime?>("birthdate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("created_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("created_by")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("customer_id")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("document")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("document_type")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("email")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("emergency_phone_number")
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("excluded")
                        .HasColumnType("boolean");

                    b.Property<string>("name")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("phone_number")
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime?>("updated_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("updated_by")
                        .HasColumnType("varchar(100)");

                    b.HasKey("id");

                    b.HasIndex("customer_id");

                    b.ToTable("customer_friends");
                });

            modelBuilder.Entity("clickfly.Models.CustomerSearch", b =>
                {
                    b.Property<string>("id")
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime?>("arrival_datetime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("created_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("created_by")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("customer_id")
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime?>("departure_datetime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("destination_id")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("destination_type")
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("excluded")
                        .HasColumnType("boolean");

                    b.Property<string>("origin_id")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("origin_type")
                        .HasColumnType("varchar(100)");

                    b.Property<int>("seats")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("updated_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("updated_by")
                        .HasColumnType("varchar(100)");

                    b.HasKey("id");

                    b.ToTable("customer_searches");
                });

            modelBuilder.Entity("clickfly.Models.DoubleCheck", b =>
                {
                    b.Property<string>("id")
                        .HasColumnType("varchar(100)");

                    b.Property<bool?>("approved")
                        .HasColumnType("boolean");

                    b.Property<string>("approver_id")
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime?>("created_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("created_by")
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("excluded")
                        .HasColumnType("boolean");

                    b.Property<string>("message")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("resource")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("resource_id")
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime?>("updated_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("updated_by")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("user_id")
                        .HasColumnType("varchar(100)");

                    b.HasKey("id");

                    b.HasIndex("user_id");

                    b.ToTable("double_checks");
                });

            modelBuilder.Entity("clickfly.Models.File", b =>
                {
                    b.Property<string>("id")
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime?>("created_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("created_by")
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("excluded")
                        .HasColumnType("boolean");

                    b.Property<string>("field_name")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("key")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("mimetype")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("name")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("resource")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("resource_id")
                        .HasColumnType("varchar(100)");

                    b.Property<long>("size")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("updated_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("updated_by")
                        .HasColumnType("varchar(100)");

                    b.HasKey("id");

                    b.ToTable("files");
                });

            modelBuilder.Entity("clickfly.Models.Flight", b =>
                {
                    b.Property<string>("id")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("air_taxi_id")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("aircraft_id")
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime?>("created_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("created_by")
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("excluded")
                        .HasColumnType("boolean");

                    b.Property<string>("type")
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime?>("updated_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("updated_by")
                        .HasColumnType("varchar(100)");

                    b.HasKey("id");

                    b.HasIndex("air_taxi_id");

                    b.HasIndex("aircraft_id");

                    b.ToTable("flights");
                });

            modelBuilder.Entity("clickfly.Models.FlightSegment", b =>
                {
                    b.Property<string>("id")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("aircraft_id")
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("arrival_datetime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("created_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("created_by")
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("departure_datetime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("destination_aerodrome_id")
                        .HasColumnType("varchar(100)");

                    b.Property<decimal>("distance")
                        .HasColumnType("numeric");

                    b.Property<string>("double_checkid")
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("excluded")
                        .HasColumnType("boolean");

                    b.Property<string>("flight_id")
                        .HasColumnType("varchar(100)");

                    b.Property<decimal>("flight_time")
                        .HasColumnType("numeric");

                    b.Property<int>("number")
                        .HasColumnType("integer");

                    b.Property<string>("origin_aerodrome_id")
                        .HasColumnType("varchar(100)");

                    b.Property<int>("price_per_seat")
                        .HasColumnType("integer");

                    b.Property<int>("total_seats")
                        .HasColumnType("integer");

                    b.Property<string>("type")
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime?>("updated_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("updated_by")
                        .HasColumnType("varchar(100)");

                    b.HasKey("id");

                    b.HasIndex("aircraft_id");

                    b.HasIndex("destination_aerodrome_id");

                    b.HasIndex("double_checkid");

                    b.HasIndex("flight_id");

                    b.HasIndex("origin_aerodrome_id");

                    b.ToTable("flight_segments");
                });

            modelBuilder.Entity("clickfly.Models.FlightSegmentStatus", b =>
                {
                    b.Property<string>("id")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("annotation")
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime?>("created_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("created_by")
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("excluded")
                        .HasColumnType("boolean");

                    b.Property<string>("flight_segment_id")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("type")
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime?>("updated_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("updated_by")
                        .HasColumnType("varchar(100)");

                    b.HasKey("id");

                    b.HasIndex("flight_segment_id");

                    b.ToTable("flight_segment_status");
                });

            modelBuilder.Entity("clickfly.Models.Manufacturer", b =>
                {
                    b.Property<string>("id")
                        .HasColumnType("varchar(40)");

                    b.Property<string>("country")
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime?>("created_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("created_by")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("description")
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("excluded")
                        .HasColumnType("boolean");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("updated_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("updated_by")
                        .HasColumnType("varchar(100)");

                    b.HasKey("id");

                    b.ToTable("manufacturers");

                    b.HasData(
                        new
                        {
                            id = "8fd21687-5beb-4f91-a13f-8dde04b6e24d",
                            country = "BR",
                            created_at = new DateTime(2022, 2, 20, 18, 57, 46, 600, DateTimeKind.Local).AddTicks(6410),
                            excluded = false,
                            name = "Embraer"
                        },
                        new
                        {
                            id = "81bb3ca4-2a3f-40b0-b62a-6df2f0681e4b",
                            country = "US",
                            created_at = new DateTime(2022, 2, 20, 18, 57, 46, 623, DateTimeKind.Local).AddTicks(2660),
                            excluded = false,
                            name = "Piper Aircraft"
                        },
                        new
                        {
                            id = "fdda563c-7109-45c3-bb26-f4f30c6975ad",
                            country = "US",
                            created_at = new DateTime(2022, 2, 20, 18, 57, 46, 623, DateTimeKind.Local).AddTicks(2870),
                            excluded = false,
                            name = "Cessna"
                        });
                });

            modelBuilder.Entity("clickfly.Models.Newsletter", b =>
                {
                    b.Property<string>("id")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("code")
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime?>("created_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("created_by")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("details")
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("excluded")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("updated_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("updated_by")
                        .HasColumnType("varchar(100)");

                    b.HasKey("id");

                    b.ToTable("newsletters");
                });

            modelBuilder.Entity("clickfly.Models.NewsletterSubscriber", b =>
                {
                    b.Property<string>("id")
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime?>("created_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("created_by")
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("excluded")
                        .HasColumnType("boolean");

                    b.Property<string>("newsletter_id")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("subscriber_id")
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime?>("updated_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("updated_by")
                        .HasColumnType("varchar(100)");

                    b.HasKey("id");

                    b.HasIndex("newsletter_id");

                    b.HasIndex("subscriber_id");

                    b.ToTable("newsletter_subscribers");
                });

            modelBuilder.Entity("clickfly.Models.Passenger", b =>
                {
                    b.Property<string>("id")
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime?>("birthdate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("booking_id")
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime?>("created_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("created_by")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("document")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("document_type")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("email")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("emergency_phone_number")
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("excluded")
                        .HasColumnType("boolean");

                    b.Property<string>("flight_segment_id")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("name")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("phone_number")
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime?>("updated_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("updated_by")
                        .HasColumnType("varchar(100)");

                    b.HasKey("id");

                    b.HasIndex("booking_id");

                    b.HasIndex("flight_segment_id");

                    b.ToTable("passengers");
                });

            modelBuilder.Entity("clickfly.Models.Permission", b =>
                {
                    b.Property<string>("id")
                        .HasColumnType("varchar(40)");

                    b.Property<bool>("_create")
                        .HasColumnType("boolean");

                    b.Property<bool>("_delete")
                        .HasColumnType("boolean");

                    b.Property<bool>("_read")
                        .HasColumnType("boolean");

                    b.Property<bool>("_update")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("created_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("created_by")
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("excluded")
                        .HasColumnType("boolean");

                    b.Property<string>("permission_group_id")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("permission_resource_id")
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime?>("updated_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("updated_by")
                        .HasColumnType("varchar(100)");

                    b.HasKey("id");

                    b.HasIndex("permission_group_id");

                    b.HasIndex("permission_resource_id");

                    b.ToTable("permissions");

                    b.HasData(
                        new
                        {
                            id = "29ce5517-9673-4595-94ec-3e17d13c8222",
                            _create = true,
                            _delete = true,
                            _read = true,
                            _update = true,
                            created_at = new DateTime(2022, 2, 20, 18, 57, 46, 631, DateTimeKind.Local).AddTicks(2260),
                            excluded = false,
                            permission_group_id = "dfa0022b-39ff-4b47-91be-6574a67b9ee0",
                            permission_resource_id = "1002da1c-241c-42af-be77-e90791c5bbab"
                        },
                        new
                        {
                            id = "b2a8ff46-9795-4e17-aeb0-29633bb3ffcf",
                            _create = true,
                            _delete = true,
                            _read = true,
                            _update = true,
                            created_at = new DateTime(2022, 2, 20, 18, 57, 46, 631, DateTimeKind.Local).AddTicks(2520),
                            excluded = false,
                            permission_group_id = "dfa0022b-39ff-4b47-91be-6574a67b9ee0",
                            permission_resource_id = "230565e6-571c-4620-b067-90205353528b"
                        },
                        new
                        {
                            id = "e28bca5d-01d2-448a-98ca-c7aaf066b880",
                            _create = true,
                            _delete = true,
                            _read = true,
                            _update = true,
                            created_at = new DateTime(2022, 2, 20, 18, 57, 46, 631, DateTimeKind.Local).AddTicks(2530),
                            excluded = false,
                            permission_group_id = "dfa0022b-39ff-4b47-91be-6574a67b9ee0",
                            permission_resource_id = "002ac8e8-90de-4c17-9684-5f9a8cb5fa83"
                        },
                        new
                        {
                            id = "fb2f56aa-f2ff-4558-b9d9-571e3f64de89",
                            _create = true,
                            _delete = true,
                            _read = true,
                            _update = true,
                            created_at = new DateTime(2022, 2, 20, 18, 57, 46, 631, DateTimeKind.Local).AddTicks(2540),
                            excluded = false,
                            permission_group_id = "dfa0022b-39ff-4b47-91be-6574a67b9ee0",
                            permission_resource_id = "c572d66e-f212-4882-93f3-b9d1e932dc40"
                        },
                        new
                        {
                            id = "4f408ec3-0e0e-43a9-adce-8866225994c5",
                            _create = true,
                            _delete = true,
                            _read = true,
                            _update = true,
                            created_at = new DateTime(2022, 2, 20, 18, 57, 46, 631, DateTimeKind.Local).AddTicks(2540),
                            excluded = false,
                            permission_group_id = "dfa0022b-39ff-4b47-91be-6574a67b9ee0",
                            permission_resource_id = "359bcfde-a8a0-4f63-89d8-3e3070887a0b"
                        },
                        new
                        {
                            id = "8637dad4-c8ec-44b1-b671-43c10fa43b0b",
                            _create = true,
                            _delete = true,
                            _read = true,
                            _update = true,
                            created_at = new DateTime(2022, 2, 20, 18, 57, 46, 631, DateTimeKind.Local).AddTicks(2550),
                            excluded = false,
                            permission_group_id = "dfa0022b-39ff-4b47-91be-6574a67b9ee0",
                            permission_resource_id = "c030a948-2771-4064-898d-00fb675844e5"
                        },
                        new
                        {
                            id = "7013fd17-6bd9-4532-b33a-7a0800b2d182",
                            _create = true,
                            _delete = true,
                            _read = true,
                            _update = true,
                            created_at = new DateTime(2022, 2, 20, 18, 57, 46, 631, DateTimeKind.Local).AddTicks(2560),
                            excluded = false,
                            permission_group_id = "dfa0022b-39ff-4b47-91be-6574a67b9ee0",
                            permission_resource_id = "10332667-bf51-4da3-ade4-0a61451bca0f"
                        },
                        new
                        {
                            id = "8cdeb1ec-a823-40ff-a383-55366dabd9c7",
                            _create = true,
                            _delete = true,
                            _read = true,
                            _update = true,
                            created_at = new DateTime(2022, 2, 20, 18, 57, 46, 631, DateTimeKind.Local).AddTicks(2560),
                            excluded = false,
                            permission_group_id = "dfa0022b-39ff-4b47-91be-6574a67b9ee0",
                            permission_resource_id = "30791f17-c95c-4dad-9efc-80053fe167a9"
                        });
                });

            modelBuilder.Entity("clickfly.Models.PermissionGroup", b =>
                {
                    b.Property<string>("id")
                        .HasColumnType("varchar(40)");

                    b.Property<bool>("allowed")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("created_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("created_by")
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("excluded")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("updated_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("updated_by")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("user_id")
                        .IsRequired()
                        .HasColumnType("varchar(40)");

                    b.Property<string>("user_role_id")
                        .IsRequired()
                        .HasColumnType("varchar(40)");

                    b.HasKey("id");

                    b.HasIndex("user_id");

                    b.HasIndex("user_role_id");

                    b.ToTable("permission_groups");

                    b.HasData(
                        new
                        {
                            id = "dfa0022b-39ff-4b47-91be-6574a67b9ee0",
                            allowed = true,
                            created_at = new DateTime(2022, 2, 20, 18, 57, 46, 627, DateTimeKind.Local).AddTicks(8400),
                            excluded = false,
                            user_id = "fa5533ef-249a-4a83-86f8-0a3d903adb5c",
                            user_role_id = "6b3b800c-f438-4ffd-8ec4-a34c1c63e87a"
                        });
                });

            modelBuilder.Entity("clickfly.Models.PermissionResource", b =>
                {
                    b.Property<string>("id")
                        .HasColumnType("varchar(40)");

                    b.Property<string>("_table")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("created_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("created_by")
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("excluded")
                        .HasColumnType("boolean");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("updated_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("updated_by")
                        .HasColumnType("varchar(100)");

                    b.HasKey("id");

                    b.ToTable("permission_resources");

                    b.HasData(
                        new
                        {
                            id = "230565e6-571c-4620-b067-90205353528b",
                            _table = "users",
                            created_at = new DateTime(2022, 2, 20, 18, 57, 46, 634, DateTimeKind.Local).AddTicks(9540),
                            excluded = false,
                            name = "Usuários"
                        },
                        new
                        {
                            id = "10048a9f-7da0-4213-af5f-6e1446a62b2a",
                            _table = "customers",
                            created_at = new DateTime(2022, 2, 20, 18, 57, 46, 634, DateTimeKind.Local).AddTicks(9820),
                            excluded = false,
                            name = "Clientes"
                        },
                        new
                        {
                            id = "c7582447-6dff-46a0-ad56-c204b248a77c",
                            _table = "aircrafts",
                            created_at = new DateTime(2022, 2, 20, 18, 57, 46, 634, DateTimeKind.Local).AddTicks(9830),
                            excluded = false,
                            name = "Aeronaves"
                        },
                        new
                        {
                            id = "002ac8e8-90de-4c17-9684-5f9a8cb5fa83",
                            _table = "aerodromes",
                            created_at = new DateTime(2022, 2, 20, 18, 57, 46, 634, DateTimeKind.Local).AddTicks(9840),
                            excluded = false,
                            name = "Aeródromos"
                        },
                        new
                        {
                            id = "33b2af87-b10a-4bc9-8ef8-b7a82f308f25",
                            _table = "flights",
                            created_at = new DateTime(2022, 2, 20, 18, 57, 46, 634, DateTimeKind.Local).AddTicks(9840),
                            excluded = false,
                            name = "Voos"
                        },
                        new
                        {
                            id = "f0eba241-dba4-42de-b9ca-379db1937d62",
                            _table = "flight_segments",
                            created_at = new DateTime(2022, 2, 20, 18, 57, 46, 634, DateTimeKind.Local).AddTicks(9850),
                            excluded = false,
                            name = "Etapas do voo"
                        },
                        new
                        {
                            id = "30791f17-c95c-4dad-9efc-80053fe167a9",
                            _table = "manufacturers",
                            created_at = new DateTime(2022, 2, 20, 18, 57, 46, 634, DateTimeKind.Local).AddTicks(9860),
                            excluded = false,
                            name = "Fabricantes"
                        },
                        new
                        {
                            id = "10332667-bf51-4da3-ade4-0a61451bca0f",
                            _table = "states",
                            created_at = new DateTime(2022, 2, 20, 18, 57, 46, 634, DateTimeKind.Local).AddTicks(9860),
                            excluded = false,
                            name = "Estados"
                        },
                        new
                        {
                            id = "c030a948-2771-4064-898d-00fb675844e5",
                            _table = "cities",
                            created_at = new DateTime(2022, 2, 20, 18, 57, 46, 634, DateTimeKind.Local).AddTicks(9870),
                            excluded = false,
                            name = "Cidades"
                        },
                        new
                        {
                            id = "1002da1c-241c-42af-be77-e90791c5bbab",
                            _table = "air_taxis",
                            created_at = new DateTime(2022, 2, 20, 18, 57, 46, 634, DateTimeKind.Local).AddTicks(9880),
                            excluded = false,
                            name = "Táxis Aéreos"
                        },
                        new
                        {
                            id = "7c6a5ebc-c741-4942-beb3-1446d1c9e464",
                            _table = "air_taxi_bases",
                            created_at = new DateTime(2022, 2, 20, 18, 57, 46, 634, DateTimeKind.Local).AddTicks(9880),
                            excluded = false,
                            name = "Bases"
                        },
                        new
                        {
                            id = "5f3beb7b-30b7-4b13-a6f9-2575e8ac80c3",
                            _table = "newsletters",
                            created_at = new DateTime(2022, 2, 20, 18, 57, 46, 634, DateTimeKind.Local).AddTicks(9880),
                            excluded = false,
                            name = "Newsletters"
                        },
                        new
                        {
                            id = "f6c9d174-1a2c-49c3-be51-c9f24cbdd55a",
                            _table = "subscribers",
                            created_at = new DateTime(2022, 2, 20, 18, 57, 46, 634, DateTimeKind.Local).AddTicks(9890),
                            excluded = false,
                            name = "Assinantes"
                        },
                        new
                        {
                            id = "3a20e0e8-d235-4cb1-bcec-251e9fcbb405",
                            _table = "aircraft_images",
                            created_at = new DateTime(2022, 2, 20, 18, 57, 46, 634, DateTimeKind.Local).AddTicks(9890),
                            excluded = false,
                            name = "Imagens da Aeronave"
                        },
                        new
                        {
                            id = "9a4181d4-01e0-40be-856a-eb940cbe7a17",
                            _table = "bookings",
                            created_at = new DateTime(2022, 2, 20, 18, 57, 46, 634, DateTimeKind.Local).AddTicks(9900),
                            excluded = false,
                            name = "Reservas"
                        },
                        new
                        {
                            id = "c572d66e-f212-4882-93f3-b9d1e932dc40",
                            _table = "aircraft_models",
                            created_at = new DateTime(2022, 2, 20, 18, 57, 46, 634, DateTimeKind.Local).AddTicks(9900),
                            excluded = false,
                            name = "Modelo de aeronaves"
                        },
                        new
                        {
                            id = "faa82a99-ead4-454c-a9d3-7c62f4da7430",
                            _table = "customer_addresses",
                            created_at = new DateTime(2022, 2, 20, 18, 57, 46, 634, DateTimeKind.Local).AddTicks(9910),
                            excluded = false,
                            name = "Endereços do cliente"
                        },
                        new
                        {
                            id = "b155a133-120c-4ded-9dfa-88316f4f790c",
                            _table = "customer_aerodromes",
                            created_at = new DateTime(2022, 2, 20, 18, 57, 46, 634, DateTimeKind.Local).AddTicks(9910),
                            excluded = false,
                            name = "Aeródromos do cliente"
                        },
                        new
                        {
                            id = "b51a4bd6-5a70-44a7-85e7-2da9466c5d8c",
                            _table = "passengers",
                            created_at = new DateTime(2022, 2, 20, 18, 57, 46, 635, DateTimeKind.Local).AddTicks(230),
                            excluded = false,
                            name = "Passageiros"
                        },
                        new
                        {
                            id = "d1d313ca-d2a3-48ff-ac32-cfa842a633c2",
                            _table = "system_configs",
                            created_at = new DateTime(2022, 2, 20, 18, 57, 46, 635, DateTimeKind.Local).AddTicks(240),
                            excluded = false,
                            name = "Configurações do Sistema"
                        },
                        new
                        {
                            id = "359bcfde-a8a0-4f63-89d8-3e3070887a0b",
                            _table = "system_logs",
                            created_at = new DateTime(2022, 2, 20, 18, 57, 46, 635, DateTimeKind.Local).AddTicks(240),
                            excluded = false,
                            name = "Logs do Sistema"
                        },
                        new
                        {
                            id = "2237baef-2a10-471e-abe1-ee2994eafb77",
                            _table = "customer_contacts",
                            created_at = new DateTime(2022, 2, 20, 18, 57, 46, 635, DateTimeKind.Local).AddTicks(250),
                            excluded = false,
                            name = "Contatos do cliente"
                        },
                        new
                        {
                            id = "2c4c1d8b-07bc-4e7b-bcc2-31704876f744",
                            _table = "double_checks",
                            created_at = new DateTime(2022, 2, 20, 18, 57, 46, 635, DateTimeKind.Local).AddTicks(250),
                            excluded = false,
                            name = "Duplas Checagens"
                        },
                        new
                        {
                            id = "ba2029c0-b1ed-4811-b18a-e2d81c4d3378",
                            _table = "push_notifications",
                            created_at = new DateTime(2022, 2, 20, 18, 57, 46, 635, DateTimeKind.Local).AddTicks(260),
                            excluded = false,
                            name = "Notificações Push"
                        },
                        new
                        {
                            id = "f934de0c-424b-4726-afcc-9a0564372ab8",
                            _table = "boardings",
                            created_at = new DateTime(2022, 2, 20, 18, 57, 46, 635, DateTimeKind.Local).AddTicks(260),
                            excluded = false,
                            name = "Embarques"
                        },
                        new
                        {
                            id = "30191b2f-2ab9-4fff-b369-ed8a114e001e",
                            _table = "campaigns",
                            created_at = new DateTime(2022, 2, 20, 18, 57, 46, 635, DateTimeKind.Local).AddTicks(260),
                            excluded = false,
                            name = "Campanhas"
                        },
                        new
                        {
                            id = "99e84be3-bbcb-4b35-adce-42e2e037322a",
                            _table = "contact_requests",
                            created_at = new DateTime(2022, 2, 20, 18, 57, 46, 635, DateTimeKind.Local).AddTicks(270),
                            excluded = false,
                            name = "Solicitações de Contato (Site)"
                        });
                });

            modelBuilder.Entity("clickfly.Models.PushNotification", b =>
                {
                    b.Property<string>("id")
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime?>("created_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("created_by")
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("excluded")
                        .HasColumnType("boolean");

                    b.Property<string>("flight_segment_id")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("notification_id")
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime?>("updated_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("updated_by")
                        .HasColumnType("varchar(100)");

                    b.HasKey("id");

                    b.ToTable("push_notifications");
                });

            modelBuilder.Entity("clickfly.Models.Score", b =>
                {
                    b.Property<string>("id")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("campaign_score_id")
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime?>("created_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("created_by")
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("excluded")
                        .HasColumnType("boolean");

                    b.Property<string>("flight_segment_id")
                        .HasColumnType("varchar(100)");

                    b.Property<int>("points")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("updated_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("updated_by")
                        .HasColumnType("varchar(100)");

                    b.HasKey("id");

                    b.HasIndex("campaign_score_id");

                    b.ToTable("score");
                });

            modelBuilder.Entity("clickfly.Models.State", b =>
                {
                    b.Property<string>("id")
                        .HasColumnType("varchar(40)");

                    b.Property<DateTime?>("created_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("created_by")
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("excluded")
                        .HasColumnType("boolean");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("prefix")
                        .IsRequired()
                        .HasColumnType("varchar(10)");

                    b.Property<DateTime?>("updated_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("updated_by")
                        .HasColumnType("varchar(100)");

                    b.HasKey("id");

                    b.ToTable("states");

                    b.HasData(
                        new
                        {
                            id = "5bc5d3c3-75e4-4a07-8424-b873cdaf97eb",
                            created_at = new DateTime(2022, 2, 20, 18, 57, 46, 639, DateTimeKind.Local).AddTicks(1790),
                            excluded = false,
                            name = "Acre",
                            prefix = "AC"
                        },
                        new
                        {
                            id = "5bf811ff-f3cb-4d36-96f0-da7151fb843c",
                            created_at = new DateTime(2022, 2, 20, 18, 57, 46, 639, DateTimeKind.Local).AddTicks(2150),
                            excluded = false,
                            name = "Alagoas",
                            prefix = "AL"
                        },
                        new
                        {
                            id = "70c5e30a-9e3b-4219-9cb6-b74bc699d3a3",
                            created_at = new DateTime(2022, 2, 20, 18, 57, 46, 639, DateTimeKind.Local).AddTicks(2160),
                            excluded = false,
                            name = "Amapá",
                            prefix = "AP"
                        },
                        new
                        {
                            id = "aa27b7ef-a373-4788-b5cb-84c4294b0ebb",
                            created_at = new DateTime(2022, 2, 20, 18, 57, 46, 639, DateTimeKind.Local).AddTicks(2170),
                            excluded = false,
                            name = "Amazonas",
                            prefix = "AM"
                        },
                        new
                        {
                            id = "aa705c29-4d43-4aed-ae41-44fc1855aa7e",
                            created_at = new DateTime(2022, 2, 20, 18, 57, 46, 639, DateTimeKind.Local).AddTicks(2170),
                            excluded = false,
                            name = "Bahia",
                            prefix = "BA"
                        },
                        new
                        {
                            id = "2cc0e771-ff94-4e6c-9197-9faa6978e751",
                            created_at = new DateTime(2022, 2, 20, 18, 57, 46, 639, DateTimeKind.Local).AddTicks(2190),
                            excluded = false,
                            name = "Ceará",
                            prefix = "CE"
                        },
                        new
                        {
                            id = "10289889-ff3f-4a02-ac90-597d436c6435",
                            created_at = new DateTime(2022, 2, 20, 18, 57, 46, 639, DateTimeKind.Local).AddTicks(2190),
                            excluded = false,
                            name = "Distrito Federal",
                            prefix = "DF"
                        },
                        new
                        {
                            id = "1cc1e4c1-96c0-4bdc-aeee-0541e283a231",
                            created_at = new DateTime(2022, 2, 20, 18, 57, 46, 639, DateTimeKind.Local).AddTicks(2200),
                            excluded = false,
                            name = "Espírito Santo",
                            prefix = "ES"
                        },
                        new
                        {
                            id = "0dfb4d34-9394-4b62-8ceb-d9bd485cf539",
                            created_at = new DateTime(2022, 2, 20, 18, 57, 46, 639, DateTimeKind.Local).AddTicks(2200),
                            excluded = false,
                            name = "Goiás",
                            prefix = "GO"
                        },
                        new
                        {
                            id = "5a38a9bd-c329-49e0-9516-6761f4a7d606",
                            created_at = new DateTime(2022, 2, 20, 18, 57, 46, 639, DateTimeKind.Local).AddTicks(2210),
                            excluded = false,
                            name = "Maranhão",
                            prefix = "MA"
                        },
                        new
                        {
                            id = "ceb3a4c4-b747-412b-a144-5ef8a3ced03e",
                            created_at = new DateTime(2022, 2, 20, 18, 57, 46, 639, DateTimeKind.Local).AddTicks(2220),
                            excluded = false,
                            name = "Mato Grosso",
                            prefix = "MT"
                        },
                        new
                        {
                            id = "9cfc017e-4cee-4e48-8208-a5e3779d70c9",
                            created_at = new DateTime(2022, 2, 20, 18, 57, 46, 639, DateTimeKind.Local).AddTicks(2220),
                            excluded = false,
                            name = "Mato Grosso do Sul",
                            prefix = "MS"
                        },
                        new
                        {
                            id = "95d20824-33f9-476d-b6d8-c42c463a360e",
                            created_at = new DateTime(2022, 2, 20, 18, 57, 46, 639, DateTimeKind.Local).AddTicks(2230),
                            excluded = false,
                            name = "Minas Gerais",
                            prefix = "MG"
                        },
                        new
                        {
                            id = "989a917f-ca06-4c0c-a44b-ce852d6eb8db",
                            created_at = new DateTime(2022, 2, 20, 18, 57, 46, 639, DateTimeKind.Local).AddTicks(2230),
                            excluded = false,
                            name = "Pará",
                            prefix = "PA"
                        },
                        new
                        {
                            id = "f1f817e7-742c-492f-8cfd-e65b6aa51527",
                            created_at = new DateTime(2022, 2, 20, 18, 57, 46, 639, DateTimeKind.Local).AddTicks(2240),
                            excluded = false,
                            name = "Paraíba",
                            prefix = "PB"
                        },
                        new
                        {
                            id = "46478f1d-66cb-4cc4-a2ba-ef183deb4388",
                            created_at = new DateTime(2022, 2, 20, 18, 57, 46, 639, DateTimeKind.Local).AddTicks(2240),
                            excluded = false,
                            name = "Paraná",
                            prefix = "PR"
                        },
                        new
                        {
                            id = "b73847c2-ac29-4787-8a14-5673bc048dae",
                            created_at = new DateTime(2022, 2, 20, 18, 57, 46, 639, DateTimeKind.Local).AddTicks(2250),
                            excluded = false,
                            name = "Pernambuco",
                            prefix = "PE"
                        },
                        new
                        {
                            id = "9f68091d-2dae-458d-8a1b-dbdb7d3b36c2",
                            created_at = new DateTime(2022, 2, 20, 18, 57, 46, 639, DateTimeKind.Local).AddTicks(2260),
                            excluded = false,
                            name = "Piauí",
                            prefix = "PI"
                        },
                        new
                        {
                            id = "7c12da9f-3002-4735-8824-f6c68126cf6f",
                            created_at = new DateTime(2022, 2, 20, 18, 57, 46, 639, DateTimeKind.Local).AddTicks(2260),
                            excluded = false,
                            name = "Rio de Janeiro",
                            prefix = "RJ"
                        },
                        new
                        {
                            id = "d04e4f39-d4f8-4cac-9fa7-682aad5e8bbc",
                            created_at = new DateTime(2022, 2, 20, 18, 57, 46, 639, DateTimeKind.Local).AddTicks(2270),
                            excluded = false,
                            name = "Rio Grande do Norte",
                            prefix = "RN"
                        },
                        new
                        {
                            id = "2bc661cf-71ed-481b-87a4-ef0e530658ad",
                            created_at = new DateTime(2022, 2, 20, 18, 57, 46, 639, DateTimeKind.Local).AddTicks(2270),
                            excluded = false,
                            name = "Rio Grande do Sul",
                            prefix = "RS"
                        },
                        new
                        {
                            id = "a027f62e-f662-450e-8688-bc89628492f5",
                            created_at = new DateTime(2022, 2, 20, 18, 57, 46, 639, DateTimeKind.Local).AddTicks(2280),
                            excluded = false,
                            name = "Rondônia",
                            prefix = "RO"
                        },
                        new
                        {
                            id = "18ee0c3e-7e1d-481d-8135-591afa8bfea0",
                            created_at = new DateTime(2022, 2, 20, 18, 57, 46, 639, DateTimeKind.Local).AddTicks(2280),
                            excluded = false,
                            name = "Roraima",
                            prefix = "RR"
                        },
                        new
                        {
                            id = "b21165a6-0a4a-496d-8371-bb050bce09d9",
                            created_at = new DateTime(2022, 2, 20, 18, 57, 46, 639, DateTimeKind.Local).AddTicks(2290),
                            excluded = false,
                            name = "Santa Catarina",
                            prefix = "SC"
                        },
                        new
                        {
                            id = "d2cd4e43-d325-4d21-88a0-3542b38d0438",
                            created_at = new DateTime(2022, 2, 20, 18, 57, 46, 639, DateTimeKind.Local).AddTicks(2290),
                            excluded = false,
                            name = "São Paulo",
                            prefix = "SP"
                        },
                        new
                        {
                            id = "ad03e50f-235b-48d3-901a-e8167ce71924",
                            created_at = new DateTime(2022, 2, 20, 18, 57, 46, 639, DateTimeKind.Local).AddTicks(2300),
                            excluded = false,
                            name = "Sergipe",
                            prefix = "SE"
                        },
                        new
                        {
                            id = "94d630ce-66d4-49b2-a133-684de51be69c",
                            created_at = new DateTime(2022, 2, 20, 18, 57, 46, 639, DateTimeKind.Local).AddTicks(2300),
                            excluded = false,
                            name = "Tocantins",
                            prefix = "TO"
                        });
                });

            modelBuilder.Entity("clickfly.Models.Subscriber", b =>
                {
                    b.Property<string>("id")
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime?>("created_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("created_by")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("details")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("email")
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("excluded")
                        .HasColumnType("boolean");

                    b.Property<bool>("unsubscribed")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("updated_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("updated_by")
                        .HasColumnType("varchar(100)");

                    b.HasKey("id");

                    b.ToTable("subscribers");
                });

            modelBuilder.Entity("clickfly.Models.SystemConfig", b =>
                {
                    b.Property<string>("id")
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime?>("created_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("created_by")
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("excluded")
                        .HasColumnType("boolean");

                    b.Property<string>("name")
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime?>("updated_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("updated_by")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("value")
                        .HasColumnType("varchar(100)");

                    b.HasKey("id");

                    b.ToTable("system_configs");
                });

            modelBuilder.Entity("clickfly.Models.SystemLog", b =>
                {
                    b.Property<string>("id")
                        .HasColumnType("varchar(40)");

                    b.Property<string>("_object")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("action")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("created_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("created_by")
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("excluded")
                        .HasColumnType("boolean");

                    b.Property<string>("ip")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("resource")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("resource_id")
                        .IsRequired()
                        .HasColumnType("varchar(40)");

                    b.Property<DateTime?>("updated_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("updated_by")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("user_id")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("user_type")
                        .HasColumnType("varchar(100)");

                    b.HasKey("id");

                    b.ToTable("system_logs");
                });

            modelBuilder.Entity("clickfly.Models.Ticket", b =>
                {
                    b.Property<string>("id")
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime?>("created_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("created_by")
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("excluded")
                        .HasColumnType("boolean");

                    b.Property<string>("flight_segment_id")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("passenger_id")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("qr_code")
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime?>("updated_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("updated_by")
                        .HasColumnType("varchar(100)");

                    b.HasKey("id");

                    b.HasIndex("flight_segment_id");

                    b.HasIndex("passenger_id")
                        .IsUnique();

                    b.ToTable("tickets");
                });

            modelBuilder.Entity("clickfly.Models.Timezone", b =>
                {
                    b.Property<string>("id")
                        .HasColumnType("varchar(40)");

                    b.Property<DateTime?>("created_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("created_by")
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("excluded")
                        .HasColumnType("boolean");

                    b.Property<int>("gmt")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("updated_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("updated_by")
                        .HasColumnType("varchar(100)");

                    b.HasKey("id");

                    b.ToTable("timezones");

                    b.HasData(
                        new
                        {
                            id = "627fd947-1062-4b1a-8c2c-7ef36cad279e",
                            created_at = new DateTime(2022, 2, 20, 18, 57, 46, 643, DateTimeKind.Local).AddTicks(3090),
                            excluded = false,
                            gmt = -2
                        },
                        new
                        {
                            id = "1235eb4b-9dd5-464f-9487-3c35a6e73a24",
                            created_at = new DateTime(2022, 2, 20, 18, 57, 46, 643, DateTimeKind.Local).AddTicks(3410),
                            excluded = false,
                            gmt = -3
                        },
                        new
                        {
                            id = "01bdd6a6-ef30-46ac-908f-74fd42bc9531",
                            created_at = new DateTime(2022, 2, 20, 18, 57, 46, 643, DateTimeKind.Local).AddTicks(3430),
                            excluded = false,
                            gmt = -4
                        },
                        new
                        {
                            id = "b2deaa96-4df2-404c-9ac1-3b58ac9d655b",
                            created_at = new DateTime(2022, 2, 20, 18, 57, 46, 643, DateTimeKind.Local).AddTicks(3440),
                            excluded = false,
                            gmt = -5
                        });
                });

            modelBuilder.Entity("clickfly.Models.User", b =>
                {
                    b.Property<string>("id")
                        .HasColumnType("varchar(40)");

                    b.Property<string>("air_taxi_id")
                        .HasColumnType("varchar(40)");

                    b.Property<DateTime?>("created_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("created_by")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("varchar(120)");

                    b.Property<string>("emergency_phone_number")
                        .HasColumnType("varchar(30)");

                    b.Property<bool>("excluded")
                        .HasColumnType("boolean");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("password_hash")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<string>("phone_number")
                        .HasColumnType("varchar(30)");

                    b.Property<DateTime?>("updated_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("updated_by")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("username")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.HasKey("id");

                    b.HasIndex("air_taxi_id");

                    b.ToTable("users");

                    b.HasData(
                        new
                        {
                            id = "fa5533ef-249a-4a83-86f8-0a3d903adb5c",
                            created_at = new DateTime(2022, 2, 20, 18, 57, 46, 883, DateTimeKind.Local).AddTicks(8330),
                            email = "josue.acaz@outlook.com",
                            excluded = false,
                            name = "JOSUE ACAZ DOS SANTOS DE OLIVEIRA",
                            password_hash = "$2a$11$obS.0z6qq3y/KmUZpSXxy.RnfuFD.kDzfRINWoii5YdpRuEmrpl7m",
                            username = "jsoliveira"
                        });
                });

            modelBuilder.Entity("clickfly.Models.UserRole", b =>
                {
                    b.Property<string>("id")
                        .HasColumnType("varchar(40)");

                    b.Property<DateTime?>("created_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("created_by")
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("excluded")
                        .HasColumnType("boolean");

                    b.Property<string>("label")
                        .IsRequired()
                        .HasColumnType("varchar(120)");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("updated_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("updated_by")
                        .HasColumnType("varchar(100)");

                    b.HasKey("id");

                    b.ToTable("user_roles");

                    b.HasData(
                        new
                        {
                            id = "0b3214f8-0f71-469b-8203-d8ba7fc158f2",
                            created_at = new DateTime(2022, 2, 20, 18, 57, 46, 886, DateTimeKind.Local).AddTicks(810),
                            excluded = false,
                            label = "Funcionário",
                            name = "employee"
                        },
                        new
                        {
                            id = "a3bd4997-cb6a-4a1c-aa59-2b27035f7b49",
                            created_at = new DateTime(2022, 2, 20, 18, 57, 46, 886, DateTimeKind.Local).AddTicks(1120),
                            excluded = false,
                            label = "Gerente",
                            name = "manager"
                        },
                        new
                        {
                            id = "1e8b789e-c5a7-41e2-a7c2-2776f0b8b616",
                            created_at = new DateTime(2022, 2, 20, 18, 57, 46, 886, DateTimeKind.Local).AddTicks(1140),
                            excluded = false,
                            label = "Administrador",
                            name = "administrator"
                        },
                        new
                        {
                            id = "6b3b800c-f438-4ffd-8ec4-a34c1c63e87a",
                            created_at = new DateTime(2022, 2, 20, 18, 57, 46, 886, DateTimeKind.Local).AddTicks(1140),
                            excluded = false,
                            label = "Administrador Geral",
                            name = "general_administrator"
                        });
                });

            modelBuilder.Entity("clickfly.Models.UserRolePermission", b =>
                {
                    b.Property<string>("id")
                        .HasColumnType("varchar(40)");

                    b.Property<bool>("_create")
                        .HasColumnType("boolean");

                    b.Property<bool>("_delete")
                        .HasColumnType("boolean");

                    b.Property<bool>("_read")
                        .HasColumnType("boolean");

                    b.Property<bool>("_update")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("created_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("created_by")
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("excluded")
                        .HasColumnType("boolean");

                    b.Property<string>("permission_resource_id")
                        .IsRequired()
                        .HasColumnType("varchar(40)");

                    b.Property<DateTime?>("updated_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("updated_by")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("user_role_id")
                        .IsRequired()
                        .HasColumnType("varchar(40)");

                    b.HasKey("id");

                    b.HasIndex("permission_resource_id");

                    b.HasIndex("user_role_id");

                    b.ToTable("user_role_permissions");

                    b.HasData(
                        new
                        {
                            id = "b65ba22c-f042-41c4-b35b-61f5f370c59b",
                            _create = true,
                            _delete = true,
                            _read = true,
                            _update = true,
                            created_at = new DateTime(2022, 2, 20, 18, 57, 46, 895, DateTimeKind.Local).AddTicks(5830),
                            excluded = false,
                            permission_resource_id = "c7582447-6dff-46a0-ad56-c204b248a77c",
                            user_role_id = "0b3214f8-0f71-469b-8203-d8ba7fc158f2"
                        },
                        new
                        {
                            id = "d1af159b-0eb7-4a70-a17e-59df65ea6f95",
                            _create = true,
                            _delete = true,
                            _read = true,
                            _update = true,
                            created_at = new DateTime(2022, 2, 20, 18, 57, 46, 895, DateTimeKind.Local).AddTicks(6330),
                            excluded = false,
                            permission_resource_id = "3a20e0e8-d235-4cb1-bcec-251e9fcbb405",
                            user_role_id = "0b3214f8-0f71-469b-8203-d8ba7fc158f2"
                        },
                        new
                        {
                            id = "b6b92832-9a26-46ce-afac-f0111c87284e",
                            _create = true,
                            _delete = true,
                            _read = true,
                            _update = true,
                            created_at = new DateTime(2022, 2, 20, 18, 57, 46, 895, DateTimeKind.Local).AddTicks(6360),
                            excluded = false,
                            permission_resource_id = "33b2af87-b10a-4bc9-8ef8-b7a82f308f25",
                            user_role_id = "0b3214f8-0f71-469b-8203-d8ba7fc158f2"
                        },
                        new
                        {
                            id = "1ffd2725-de5d-4a49-a3a5-37f66caef01f",
                            _create = true,
                            _delete = true,
                            _read = true,
                            _update = true,
                            created_at = new DateTime(2022, 2, 20, 18, 57, 46, 895, DateTimeKind.Local).AddTicks(6380),
                            excluded = false,
                            permission_resource_id = "f0eba241-dba4-42de-b9ca-379db1937d62",
                            user_role_id = "0b3214f8-0f71-469b-8203-d8ba7fc158f2"
                        },
                        new
                        {
                            id = "13046821-221c-4648-aff1-636bcc369af2",
                            _create = true,
                            _delete = true,
                            _read = true,
                            _update = true,
                            created_at = new DateTime(2022, 2, 20, 18, 57, 46, 895, DateTimeKind.Local).AddTicks(6410),
                            excluded = false,
                            permission_resource_id = "7c6a5ebc-c741-4942-beb3-1446d1c9e464",
                            user_role_id = "0b3214f8-0f71-469b-8203-d8ba7fc158f2"
                        },
                        new
                        {
                            id = "3beb1653-1ea1-4a7b-b6e4-6366d327ff9a",
                            _create = true,
                            _delete = true,
                            _read = true,
                            _update = true,
                            created_at = new DateTime(2022, 2, 20, 18, 57, 46, 895, DateTimeKind.Local).AddTicks(6460),
                            excluded = false,
                            permission_resource_id = "9a4181d4-01e0-40be-856a-eb940cbe7a17",
                            user_role_id = "0b3214f8-0f71-469b-8203-d8ba7fc158f2"
                        },
                        new
                        {
                            id = "eae108a9-a965-47db-a5b7-9be8d6aaffa9",
                            _create = true,
                            _delete = true,
                            _read = true,
                            _update = true,
                            created_at = new DateTime(2022, 2, 20, 18, 57, 46, 895, DateTimeKind.Local).AddTicks(6480),
                            excluded = false,
                            permission_resource_id = "30191b2f-2ab9-4fff-b369-ed8a114e001e",
                            user_role_id = "0b3214f8-0f71-469b-8203-d8ba7fc158f2"
                        },
                        new
                        {
                            id = "6ab1fa37-817b-4298-b4ca-ce2d4dd88f93",
                            _create = true,
                            _delete = true,
                            _read = true,
                            _update = true,
                            created_at = new DateTime(2022, 2, 20, 18, 57, 46, 895, DateTimeKind.Local).AddTicks(6490),
                            excluded = false,
                            permission_resource_id = "ba2029c0-b1ed-4811-b18a-e2d81c4d3378",
                            user_role_id = "0b3214f8-0f71-469b-8203-d8ba7fc158f2"
                        },
                        new
                        {
                            id = "13bb16a7-6f50-4632-9957-85997e38941b",
                            _create = true,
                            _delete = true,
                            _read = true,
                            _update = true,
                            created_at = new DateTime(2022, 2, 20, 18, 57, 46, 895, DateTimeKind.Local).AddTicks(6500),
                            excluded = false,
                            permission_resource_id = "f934de0c-424b-4726-afcc-9a0564372ab8",
                            user_role_id = "0b3214f8-0f71-469b-8203-d8ba7fc158f2"
                        },
                        new
                        {
                            id = "3b0d6c64-97c8-4fff-849b-ffa4ad245fa5",
                            _create = true,
                            _delete = true,
                            _read = true,
                            _update = true,
                            created_at = new DateTime(2022, 2, 20, 18, 57, 46, 895, DateTimeKind.Local).AddTicks(6510),
                            excluded = false,
                            permission_resource_id = "c7582447-6dff-46a0-ad56-c204b248a77c",
                            user_role_id = "a3bd4997-cb6a-4a1c-aa59-2b27035f7b49"
                        },
                        new
                        {
                            id = "eeb78152-df9b-4978-8753-6c9e7975a829",
                            _create = true,
                            _delete = true,
                            _read = true,
                            _update = true,
                            created_at = new DateTime(2022, 2, 20, 18, 57, 46, 895, DateTimeKind.Local).AddTicks(6770),
                            excluded = false,
                            permission_resource_id = "3a20e0e8-d235-4cb1-bcec-251e9fcbb405",
                            user_role_id = "a3bd4997-cb6a-4a1c-aa59-2b27035f7b49"
                        },
                        new
                        {
                            id = "6d6929dd-5bd4-4d40-8416-715c6f191987",
                            _create = true,
                            _delete = true,
                            _read = true,
                            _update = true,
                            created_at = new DateTime(2022, 2, 20, 18, 57, 46, 895, DateTimeKind.Local).AddTicks(6790),
                            excluded = false,
                            permission_resource_id = "33b2af87-b10a-4bc9-8ef8-b7a82f308f25",
                            user_role_id = "a3bd4997-cb6a-4a1c-aa59-2b27035f7b49"
                        },
                        new
                        {
                            id = "895032cb-c70b-478e-afd9-c2ecb2978024",
                            _create = true,
                            _delete = true,
                            _read = true,
                            _update = true,
                            created_at = new DateTime(2022, 2, 20, 18, 57, 46, 895, DateTimeKind.Local).AddTicks(6820),
                            excluded = false,
                            permission_resource_id = "f0eba241-dba4-42de-b9ca-379db1937d62",
                            user_role_id = "a3bd4997-cb6a-4a1c-aa59-2b27035f7b49"
                        },
                        new
                        {
                            id = "11adefd6-5ef8-4158-8f52-76f58c2bb5e8",
                            _create = true,
                            _delete = true,
                            _read = true,
                            _update = true,
                            created_at = new DateTime(2022, 2, 20, 18, 57, 46, 895, DateTimeKind.Local).AddTicks(6850),
                            excluded = false,
                            permission_resource_id = "7c6a5ebc-c741-4942-beb3-1446d1c9e464",
                            user_role_id = "a3bd4997-cb6a-4a1c-aa59-2b27035f7b49"
                        },
                        new
                        {
                            id = "31aaff2e-047f-4196-870a-0686bfbc4c6d",
                            _create = true,
                            _delete = true,
                            _read = true,
                            _update = true,
                            created_at = new DateTime(2022, 2, 20, 18, 57, 46, 895, DateTimeKind.Local).AddTicks(6880),
                            excluded = false,
                            permission_resource_id = "9a4181d4-01e0-40be-856a-eb940cbe7a17",
                            user_role_id = "a3bd4997-cb6a-4a1c-aa59-2b27035f7b49"
                        },
                        new
                        {
                            id = "8997c90b-2d43-46d9-b7e4-230892047f01",
                            _create = true,
                            _delete = true,
                            _read = true,
                            _update = true,
                            created_at = new DateTime(2022, 2, 20, 18, 57, 46, 895, DateTimeKind.Local).AddTicks(6890),
                            excluded = false,
                            permission_resource_id = "2c4c1d8b-07bc-4e7b-bcc2-31704876f744",
                            user_role_id = "a3bd4997-cb6a-4a1c-aa59-2b27035f7b49"
                        },
                        new
                        {
                            id = "ddb46144-33ad-49f3-b1b0-ec1a2cb6084c",
                            _create = true,
                            _delete = true,
                            _read = true,
                            _update = true,
                            created_at = new DateTime(2022, 2, 20, 18, 57, 46, 895, DateTimeKind.Local).AddTicks(6900),
                            excluded = false,
                            permission_resource_id = "30191b2f-2ab9-4fff-b369-ed8a114e001e",
                            user_role_id = "a3bd4997-cb6a-4a1c-aa59-2b27035f7b49"
                        },
                        new
                        {
                            id = "43ac45c7-f5ee-4849-b377-a402066b54ce",
                            _create = true,
                            _delete = true,
                            _read = true,
                            _update = true,
                            created_at = new DateTime(2022, 2, 20, 18, 57, 46, 895, DateTimeKind.Local).AddTicks(6920),
                            excluded = false,
                            permission_resource_id = "99e84be3-bbcb-4b35-adce-42e2e037322a",
                            user_role_id = "a3bd4997-cb6a-4a1c-aa59-2b27035f7b49"
                        },
                        new
                        {
                            id = "39463eed-4865-4307-b8e9-627622ac856d",
                            _create = true,
                            _delete = true,
                            _read = true,
                            _update = true,
                            created_at = new DateTime(2022, 2, 20, 18, 57, 46, 895, DateTimeKind.Local).AddTicks(6930),
                            excluded = false,
                            permission_resource_id = "ba2029c0-b1ed-4811-b18a-e2d81c4d3378",
                            user_role_id = "a3bd4997-cb6a-4a1c-aa59-2b27035f7b49"
                        },
                        new
                        {
                            id = "09bead97-95f1-442d-99cc-cede4af88b07",
                            _create = true,
                            _delete = true,
                            _read = true,
                            _update = true,
                            created_at = new DateTime(2022, 2, 20, 18, 57, 46, 895, DateTimeKind.Local).AddTicks(6950),
                            excluded = false,
                            permission_resource_id = "f934de0c-424b-4726-afcc-9a0564372ab8",
                            user_role_id = "a3bd4997-cb6a-4a1c-aa59-2b27035f7b49"
                        },
                        new
                        {
                            id = "b4ee9482-b8e3-422d-9585-a2fb4c3c5191",
                            _create = true,
                            _delete = true,
                            _read = true,
                            _update = true,
                            created_at = new DateTime(2022, 2, 20, 18, 57, 46, 895, DateTimeKind.Local).AddTicks(6970),
                            excluded = false,
                            permission_resource_id = "c7582447-6dff-46a0-ad56-c204b248a77c",
                            user_role_id = "1e8b789e-c5a7-41e2-a7c2-2776f0b8b616"
                        },
                        new
                        {
                            id = "1790d272-401c-4dc3-a413-aeee38a48349",
                            _create = true,
                            _delete = true,
                            _read = true,
                            _update = true,
                            created_at = new DateTime(2022, 2, 20, 18, 57, 46, 895, DateTimeKind.Local).AddTicks(6980),
                            excluded = false,
                            permission_resource_id = "3a20e0e8-d235-4cb1-bcec-251e9fcbb405",
                            user_role_id = "1e8b789e-c5a7-41e2-a7c2-2776f0b8b616"
                        },
                        new
                        {
                            id = "498e4c02-13cc-48f4-b3a0-0343148f6c81",
                            _create = true,
                            _delete = true,
                            _read = true,
                            _update = true,
                            created_at = new DateTime(2022, 2, 20, 18, 57, 46, 895, DateTimeKind.Local).AddTicks(6990),
                            excluded = false,
                            permission_resource_id = "33b2af87-b10a-4bc9-8ef8-b7a82f308f25",
                            user_role_id = "1e8b789e-c5a7-41e2-a7c2-2776f0b8b616"
                        },
                        new
                        {
                            id = "ae2efc30-b546-415d-885f-fa5835b4e08d",
                            _create = true,
                            _delete = true,
                            _read = true,
                            _update = true,
                            created_at = new DateTime(2022, 2, 20, 18, 57, 46, 895, DateTimeKind.Local).AddTicks(7000),
                            excluded = false,
                            permission_resource_id = "f0eba241-dba4-42de-b9ca-379db1937d62",
                            user_role_id = "1e8b789e-c5a7-41e2-a7c2-2776f0b8b616"
                        },
                        new
                        {
                            id = "8bd3c9b3-4647-4699-84d8-5d29860f7137",
                            _create = true,
                            _delete = true,
                            _read = true,
                            _update = true,
                            created_at = new DateTime(2022, 2, 20, 18, 57, 46, 895, DateTimeKind.Local).AddTicks(7020),
                            excluded = false,
                            permission_resource_id = "7c6a5ebc-c741-4942-beb3-1446d1c9e464",
                            user_role_id = "1e8b789e-c5a7-41e2-a7c2-2776f0b8b616"
                        },
                        new
                        {
                            id = "c07c71bf-7485-4454-934f-4723c3a6a043",
                            _create = true,
                            _delete = true,
                            _read = true,
                            _update = true,
                            created_at = new DateTime(2022, 2, 20, 18, 57, 46, 895, DateTimeKind.Local).AddTicks(7120),
                            excluded = false,
                            permission_resource_id = "9a4181d4-01e0-40be-856a-eb940cbe7a17",
                            user_role_id = "1e8b789e-c5a7-41e2-a7c2-2776f0b8b616"
                        },
                        new
                        {
                            id = "82af4c23-c460-43e6-8480-44a2dc3fc0a4",
                            _create = true,
                            _delete = true,
                            _read = true,
                            _update = true,
                            created_at = new DateTime(2022, 2, 20, 18, 57, 46, 895, DateTimeKind.Local).AddTicks(7130),
                            excluded = false,
                            permission_resource_id = "2c4c1d8b-07bc-4e7b-bcc2-31704876f744",
                            user_role_id = "1e8b789e-c5a7-41e2-a7c2-2776f0b8b616"
                        },
                        new
                        {
                            id = "1da6b922-b399-4cd1-8623-6a2bbdfbe6ab",
                            _create = true,
                            _delete = true,
                            _read = true,
                            _update = true,
                            created_at = new DateTime(2022, 2, 20, 18, 57, 46, 895, DateTimeKind.Local).AddTicks(7150),
                            excluded = false,
                            permission_resource_id = "30191b2f-2ab9-4fff-b369-ed8a114e001e",
                            user_role_id = "1e8b789e-c5a7-41e2-a7c2-2776f0b8b616"
                        },
                        new
                        {
                            id = "a60e1275-3a75-4405-aa34-886a0119ad19",
                            _create = true,
                            _delete = true,
                            _read = true,
                            _update = true,
                            created_at = new DateTime(2022, 2, 20, 18, 57, 46, 895, DateTimeKind.Local).AddTicks(7160),
                            excluded = false,
                            permission_resource_id = "99e84be3-bbcb-4b35-adce-42e2e037322a",
                            user_role_id = "1e8b789e-c5a7-41e2-a7c2-2776f0b8b616"
                        },
                        new
                        {
                            id = "68f569aa-e54a-42fc-9f0a-aa9325e9256b",
                            _create = true,
                            _delete = true,
                            _read = true,
                            _update = true,
                            created_at = new DateTime(2022, 2, 20, 18, 57, 46, 895, DateTimeKind.Local).AddTicks(7230),
                            excluded = false,
                            permission_resource_id = "ba2029c0-b1ed-4811-b18a-e2d81c4d3378",
                            user_role_id = "1e8b789e-c5a7-41e2-a7c2-2776f0b8b616"
                        },
                        new
                        {
                            id = "2a624118-242f-48d8-8d89-3c883c7152c5",
                            _create = true,
                            _delete = true,
                            _read = true,
                            _update = true,
                            created_at = new DateTime(2022, 2, 20, 18, 57, 46, 895, DateTimeKind.Local).AddTicks(7240),
                            excluded = false,
                            permission_resource_id = "f934de0c-424b-4726-afcc-9a0564372ab8",
                            user_role_id = "1e8b789e-c5a7-41e2-a7c2-2776f0b8b616"
                        },
                        new
                        {
                            id = "17c9f390-2bef-47e5-8c6f-1dbd11f3760e",
                            _create = true,
                            _delete = true,
                            _read = true,
                            _update = true,
                            created_at = new DateTime(2022, 2, 20, 18, 57, 46, 895, DateTimeKind.Local).AddTicks(7250),
                            excluded = false,
                            permission_resource_id = "230565e6-571c-4620-b067-90205353528b",
                            user_role_id = "1e8b789e-c5a7-41e2-a7c2-2776f0b8b616"
                        },
                        new
                        {
                            id = "029c5acf-7a5b-4a8a-bccf-b7ccbedb6cf7",
                            _create = true,
                            _delete = true,
                            _read = true,
                            _update = true,
                            created_at = new DateTime(2022, 2, 20, 18, 57, 46, 895, DateTimeKind.Local).AddTicks(7260),
                            excluded = false,
                            permission_resource_id = "1002da1c-241c-42af-be77-e90791c5bbab",
                            user_role_id = "6b3b800c-f438-4ffd-8ec4-a34c1c63e87a"
                        },
                        new
                        {
                            id = "1c05eca8-2176-40a9-b90d-5dd26302c9c7",
                            _create = true,
                            _delete = true,
                            _read = true,
                            _update = true,
                            created_at = new DateTime(2022, 2, 20, 18, 57, 46, 895, DateTimeKind.Local).AddTicks(7370),
                            excluded = false,
                            permission_resource_id = "230565e6-571c-4620-b067-90205353528b",
                            user_role_id = "6b3b800c-f438-4ffd-8ec4-a34c1c63e87a"
                        },
                        new
                        {
                            id = "9e5b8dd5-0bc7-4bf7-bdd6-88f069b8072b",
                            _create = true,
                            _delete = true,
                            _read = true,
                            _update = true,
                            created_at = new DateTime(2022, 2, 20, 18, 57, 46, 895, DateTimeKind.Local).AddTicks(7380),
                            excluded = false,
                            permission_resource_id = "002ac8e8-90de-4c17-9684-5f9a8cb5fa83",
                            user_role_id = "6b3b800c-f438-4ffd-8ec4-a34c1c63e87a"
                        },
                        new
                        {
                            id = "15607ef0-2e41-4f0d-8f47-8a0590b39053",
                            _create = true,
                            _delete = true,
                            _read = true,
                            _update = true,
                            created_at = new DateTime(2022, 2, 20, 18, 57, 46, 895, DateTimeKind.Local).AddTicks(7390),
                            excluded = false,
                            permission_resource_id = "c572d66e-f212-4882-93f3-b9d1e932dc40",
                            user_role_id = "6b3b800c-f438-4ffd-8ec4-a34c1c63e87a"
                        },
                        new
                        {
                            id = "304ce2e9-e0f7-4e70-8c91-0d904658f7c0",
                            _create = true,
                            _delete = true,
                            _read = true,
                            _update = true,
                            created_at = new DateTime(2022, 2, 20, 18, 57, 46, 895, DateTimeKind.Local).AddTicks(7400),
                            excluded = false,
                            permission_resource_id = "359bcfde-a8a0-4f63-89d8-3e3070887a0b",
                            user_role_id = "6b3b800c-f438-4ffd-8ec4-a34c1c63e87a"
                        },
                        new
                        {
                            id = "96ea5cad-9c11-4e4a-bdc2-dae85ef315db",
                            _create = true,
                            _delete = true,
                            _read = true,
                            _update = true,
                            created_at = new DateTime(2022, 2, 20, 18, 57, 46, 895, DateTimeKind.Local).AddTicks(7420),
                            excluded = false,
                            permission_resource_id = "c030a948-2771-4064-898d-00fb675844e5",
                            user_role_id = "6b3b800c-f438-4ffd-8ec4-a34c1c63e87a"
                        },
                        new
                        {
                            id = "b56c0061-da53-490a-815d-30d4ca5ef0f0",
                            _create = true,
                            _delete = true,
                            _read = true,
                            _update = true,
                            created_at = new DateTime(2022, 2, 20, 18, 57, 46, 895, DateTimeKind.Local).AddTicks(7430),
                            excluded = false,
                            permission_resource_id = "10332667-bf51-4da3-ade4-0a61451bca0f",
                            user_role_id = "6b3b800c-f438-4ffd-8ec4-a34c1c63e87a"
                        },
                        new
                        {
                            id = "e3bd9da3-8d1b-4dce-936c-f13c74e46123",
                            _create = true,
                            _delete = true,
                            _read = true,
                            _update = true,
                            created_at = new DateTime(2022, 2, 20, 18, 57, 46, 895, DateTimeKind.Local).AddTicks(7440),
                            excluded = false,
                            permission_resource_id = "30791f17-c95c-4dad-9efc-80053fe167a9",
                            user_role_id = "6b3b800c-f438-4ffd-8ec4-a34c1c63e87a"
                        });
                });

            modelBuilder.Entity("clickfly.Models.AccountVerification", b =>
                {
                    b.HasOne("clickfly.Models.Customer", "customer")
                        .WithMany()
                        .HasForeignKey("customer_id");

                    b.Navigation("customer");
                });

            modelBuilder.Entity("clickfly.Models.Aerodrome", b =>
                {
                    b.HasOne("clickfly.Models.City", "city")
                        .WithMany()
                        .HasForeignKey("city_id");

                    b.Navigation("city");
                });

            modelBuilder.Entity("clickfly.Models.AirTaxiBase", b =>
                {
                    b.HasOne("clickfly.Models.Aerodrome", "aerodrome")
                        .WithMany()
                        .HasForeignKey("aerodrome_id");

                    b.HasOne("clickfly.Models.AirTaxi", "air_taxi")
                        .WithMany()
                        .HasForeignKey("air_taxi_id");

                    b.Navigation("aerodrome");

                    b.Navigation("air_taxi");
                });

            modelBuilder.Entity("clickfly.Models.Aircraft", b =>
                {
                    b.HasOne("clickfly.Models.AirTaxi", "air_taxi")
                        .WithMany()
                        .HasForeignKey("air_taxi_id");

                    b.HasOne("clickfly.Models.AircraftModel", "model")
                        .WithMany("aircrafts")
                        .HasForeignKey("aircraft_model_id");

                    b.Navigation("air_taxi");

                    b.Navigation("model");
                });

            modelBuilder.Entity("clickfly.Models.AircraftImage", b =>
                {
                    b.HasOne("clickfly.Models.Aircraft", "aircraft")
                        .WithMany()
                        .HasForeignKey("aircraft_id");

                    b.Navigation("aircraft");
                });

            modelBuilder.Entity("clickfly.Models.AircraftModel", b =>
                {
                    b.HasOne("clickfly.Models.Manufacturer", "manufacturer")
                        .WithMany()
                        .HasForeignKey("manufacturer_id");

                    b.Navigation("manufacturer");
                });

            modelBuilder.Entity("clickfly.Models.Booking", b =>
                {
                    b.HasOne("clickfly.Models.Customer", "customer")
                        .WithMany()
                        .HasForeignKey("customer_id");

                    b.HasOne("clickfly.Models.FlightSegment", "flight_segment")
                        .WithMany()
                        .HasForeignKey("flight_segment_id");

                    b.Navigation("customer");

                    b.Navigation("flight_segment");
                });

            modelBuilder.Entity("clickfly.Models.BookingPayment", b =>
                {
                    b.HasOne("clickfly.Models.Booking", "booking")
                        .WithMany("payments")
                        .HasForeignKey("booking_id");

                    b.Navigation("booking");
                });

            modelBuilder.Entity("clickfly.Models.BookingStatus", b =>
                {
                    b.HasOne("clickfly.Models.Booking", "booking")
                        .WithMany("status")
                        .HasForeignKey("booking_id");

                    b.Navigation("booking");
                });

            modelBuilder.Entity("clickfly.Models.CampaignScore", b =>
                {
                    b.HasOne("clickfly.Models.Campaign", "campaign")
                        .WithMany()
                        .HasForeignKey("campaign_id");

                    b.HasOne("clickfly.Models.Customer", "customer")
                        .WithMany()
                        .HasForeignKey("customer_id");

                    b.Navigation("campaign");

                    b.Navigation("customer");
                });

            modelBuilder.Entity("clickfly.Models.CampaignStatus", b =>
                {
                    b.HasOne("clickfly.Models.Campaign", "campaign")
                        .WithMany()
                        .HasForeignKey("campaign_id");

                    b.Navigation("campaign");
                });

            modelBuilder.Entity("clickfly.Models.City", b =>
                {
                    b.HasOne("clickfly.Models.State", "state")
                        .WithMany()
                        .HasForeignKey("state_id");

                    b.HasOne("clickfly.Models.Timezone", "timezone")
                        .WithMany()
                        .HasForeignKey("timezone_id");

                    b.Navigation("state");

                    b.Navigation("timezone");
                });

            modelBuilder.Entity("clickfly.Models.CustomerAddress", b =>
                {
                    b.HasOne("clickfly.Models.Customer", "customer")
                        .WithMany("addresses")
                        .HasForeignKey("customer_id");

                    b.Navigation("customer");
                });

            modelBuilder.Entity("clickfly.Models.CustomerAerodrome", b =>
                {
                    b.HasOne("clickfly.Models.Aerodrome", "aerodrome")
                        .WithMany()
                        .HasForeignKey("aerodrome_id");

                    b.HasOne("clickfly.Models.Customer", "customer")
                        .WithMany()
                        .HasForeignKey("customer_id");

                    b.Navigation("aerodrome");

                    b.Navigation("customer");
                });

            modelBuilder.Entity("clickfly.Models.CustomerCard", b =>
                {
                    b.HasOne("clickfly.Models.Customer", "customer")
                        .WithMany("cards")
                        .HasForeignKey("customer_id");

                    b.Navigation("customer");
                });

            modelBuilder.Entity("clickfly.Models.CustomerContact", b =>
                {
                    b.HasOne("clickfly.Models.Customer", "customer")
                        .WithMany()
                        .HasForeignKey("customer_id");

                    b.Navigation("customer");
                });

            modelBuilder.Entity("clickfly.Models.CustomerFriend", b =>
                {
                    b.HasOne("clickfly.Models.Customer", "customer")
                        .WithMany("friends")
                        .HasForeignKey("customer_id");

                    b.Navigation("customer");
                });

            modelBuilder.Entity("clickfly.Models.DoubleCheck", b =>
                {
                    b.HasOne("clickfly.Models.User", "_user")
                        .WithMany()
                        .HasForeignKey("user_id");

                    b.Navigation("_user");
                });

            modelBuilder.Entity("clickfly.Models.Flight", b =>
                {
                    b.HasOne("clickfly.Models.AirTaxi", "air_taxi")
                        .WithMany()
                        .HasForeignKey("air_taxi_id");

                    b.HasOne("clickfly.Models.Aircraft", "aircraft")
                        .WithMany("flights")
                        .HasForeignKey("aircraft_id");

                    b.Navigation("air_taxi");

                    b.Navigation("aircraft");
                });

            modelBuilder.Entity("clickfly.Models.FlightSegment", b =>
                {
                    b.HasOne("clickfly.Models.Aircraft", "aircraft")
                        .WithMany()
                        .HasForeignKey("aircraft_id");

                    b.HasOne("clickfly.Models.Aerodrome", "destination_aerodrome")
                        .WithMany()
                        .HasForeignKey("destination_aerodrome_id");

                    b.HasOne("clickfly.Models.DoubleCheck", "double_check")
                        .WithMany()
                        .HasForeignKey("double_checkid");

                    b.HasOne("clickfly.Models.Flight", "flight")
                        .WithMany("segments")
                        .HasForeignKey("flight_id");

                    b.HasOne("clickfly.Models.Aerodrome", "origin_aerodrome")
                        .WithMany()
                        .HasForeignKey("origin_aerodrome_id");

                    b.Navigation("aircraft");

                    b.Navigation("destination_aerodrome");

                    b.Navigation("double_check");

                    b.Navigation("flight");

                    b.Navigation("origin_aerodrome");
                });

            modelBuilder.Entity("clickfly.Models.FlightSegmentStatus", b =>
                {
                    b.HasOne("clickfly.Models.FlightSegment", "flight_segment")
                        .WithMany()
                        .HasForeignKey("flight_segment_id");

                    b.Navigation("flight_segment");
                });

            modelBuilder.Entity("clickfly.Models.NewsletterSubscriber", b =>
                {
                    b.HasOne("clickfly.Models.Newsletter", "newsletter")
                        .WithMany()
                        .HasForeignKey("newsletter_id");

                    b.HasOne("clickfly.Models.Subscriber", "subscriber")
                        .WithMany()
                        .HasForeignKey("subscriber_id");

                    b.Navigation("newsletter");

                    b.Navigation("subscriber");
                });

            modelBuilder.Entity("clickfly.Models.Passenger", b =>
                {
                    b.HasOne("clickfly.Models.Booking", "booking")
                        .WithMany("passengers")
                        .HasForeignKey("booking_id");

                    b.HasOne("clickfly.Models.FlightSegment", "flight_segment")
                        .WithMany()
                        .HasForeignKey("flight_segment_id");

                    b.Navigation("booking");

                    b.Navigation("flight_segment");
                });

            modelBuilder.Entity("clickfly.Models.Permission", b =>
                {
                    b.HasOne("clickfly.Models.PermissionGroup", "permissionGroup")
                        .WithMany("permissions")
                        .HasForeignKey("permission_group_id");

                    b.HasOne("clickfly.Models.PermissionResource", "permissionResource")
                        .WithMany()
                        .HasForeignKey("permission_resource_id");

                    b.Navigation("permissionGroup");

                    b.Navigation("permissionResource");
                });

            modelBuilder.Entity("clickfly.Models.PermissionGroup", b =>
                {
                    b.HasOne("clickfly.Models.User", "user")
                        .WithMany()
                        .HasForeignKey("user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("clickfly.Models.UserRole", "role")
                        .WithMany()
                        .HasForeignKey("user_role_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("role");

                    b.Navigation("user");
                });

            modelBuilder.Entity("clickfly.Models.Score", b =>
                {
                    b.HasOne("clickfly.Models.CampaignScore", "campaign_score")
                        .WithMany()
                        .HasForeignKey("campaign_score_id");

                    b.Navigation("campaign_score");
                });

            modelBuilder.Entity("clickfly.Models.Ticket", b =>
                {
                    b.HasOne("clickfly.Models.FlightSegment", "flight_segment")
                        .WithMany()
                        .HasForeignKey("flight_segment_id");

                    b.HasOne("clickfly.Models.Passenger", "passenger")
                        .WithOne("ticket")
                        .HasForeignKey("clickfly.Models.Ticket", "passenger_id");

                    b.Navigation("flight_segment");

                    b.Navigation("passenger");
                });

            modelBuilder.Entity("clickfly.Models.User", b =>
                {
                    b.HasOne("clickfly.Models.AirTaxi", "air_taxi")
                        .WithMany()
                        .HasForeignKey("air_taxi_id");

                    b.Navigation("air_taxi");
                });

            modelBuilder.Entity("clickfly.Models.UserRolePermission", b =>
                {
                    b.HasOne("clickfly.Models.PermissionResource", "permissionResource")
                        .WithMany()
                        .HasForeignKey("permission_resource_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("clickfly.Models.UserRole", "userRole")
                        .WithMany("permissions")
                        .HasForeignKey("user_role_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("permissionResource");

                    b.Navigation("userRole");
                });

            modelBuilder.Entity("clickfly.Models.Aircraft", b =>
                {
                    b.Navigation("flights");
                });

            modelBuilder.Entity("clickfly.Models.AircraftModel", b =>
                {
                    b.Navigation("aircrafts");
                });

            modelBuilder.Entity("clickfly.Models.Booking", b =>
                {
                    b.Navigation("passengers");

                    b.Navigation("payments");

                    b.Navigation("status");
                });

            modelBuilder.Entity("clickfly.Models.Customer", b =>
                {
                    b.Navigation("addresses");

                    b.Navigation("cards");

                    b.Navigation("friends");
                });

            modelBuilder.Entity("clickfly.Models.Flight", b =>
                {
                    b.Navigation("segments");
                });

            modelBuilder.Entity("clickfly.Models.Passenger", b =>
                {
                    b.Navigation("ticket");
                });

            modelBuilder.Entity("clickfly.Models.PermissionGroup", b =>
                {
                    b.Navigation("permissions");
                });

            modelBuilder.Entity("clickfly.Models.UserRole", b =>
                {
                    b.Navigation("permissions");
                });
#pragma warning restore 612, 618
        }
    }
}
